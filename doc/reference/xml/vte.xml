<refentry id="VteTerminal">
<refmeta>
<refentrytitle role="top_of_page" id="VteTerminal.top_of_page">VteTerminal</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>VTE Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>VteTerminal</refname>
<refpurpose>A terminal widget implementation.</refpurpose>
</refnamediv>

<refsynopsisdiv id="VteTerminal.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="VteTerminal-struct">VteTerminal</link>;
enum                <link linkend="VteTerminalEraseBinding">VteTerminalEraseBinding</link>;
enum                <link linkend="VteTerminalCursorShape">VteTerminalCursorShape</link>;
enum                <link linkend="VteTerminalCursorBlinkMode">VteTerminalCursorBlinkMode</link>;
<link linkend="GtkWidget">GtkWidget</link> *         <link linkend="vte-terminal-new">vte_terminal_new</link>                    (void);
<link linkend="void">void</link>                <link linkend="vte-terminal-im-append-menuitems">vte_terminal_im_append_menuitems</link>    (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="GtkMenuShell">GtkMenuShell</link> *menushell);
<link linkend="pid-t">pid_t</link>               <link linkend="vte-terminal-fork-command">vte_terminal_fork_command</link>           (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *command,
                                                         <link linkend="char">char</link> **argv,
                                                         <link linkend="char">char</link> **envv,
                                                         const <link linkend="char">char</link> *directory,
                                                         <link linkend="gboolean">gboolean</link> lastlog,
                                                         <link linkend="gboolean">gboolean</link> utmp,
                                                         <link linkend="gboolean">gboolean</link> wtmp);
<link linkend="pid-t">pid_t</link>               <link linkend="vte-terminal-forkpty">vte_terminal_forkpty</link>                (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="char">char</link> **envv,
                                                         const <link linkend="char">char</link> *directory,
                                                         <link linkend="gboolean">gboolean</link> lastlog,
                                                         <link linkend="gboolean">gboolean</link> utmp,
                                                         <link linkend="gboolean">gboolean</link> wtmp);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-pty">vte_terminal_set_pty</link>                (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="int">int</link> pty_master);
<link linkend="int">int</link>                 <link linkend="vte-terminal-get-pty">vte_terminal_get_pty</link>                (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-feed">vte_terminal_feed</link>                   (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *data,
                                                         <link linkend="glong">glong</link> length);
<link linkend="void">void</link>                <link linkend="vte-terminal-feed-child">vte_terminal_feed_child</link>             (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *text,
                                                         <link linkend="glong">glong</link> length);
<link linkend="void">void</link>                <link linkend="vte-terminal-feed-child-binary">vte_terminal_feed_child_binary</link>      (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *data,
                                                         <link linkend="glong">glong</link> length);
<link linkend="int">int</link>                 <link linkend="vte-terminal-get-child-exit-status">vte_terminal_get_child_exit_status</link>  (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-select-all">vte_terminal_select_all</link>             (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-select-none">vte_terminal_select_none</link>            (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-copy-clipboard">vte_terminal_copy_clipboard</link>         (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-paste-clipboard">vte_terminal_paste_clipboard</link>        (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-copy-primary">vte_terminal_copy_primary</link>           (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-paste-primary">vte_terminal_paste_primary</link>          (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-size">vte_terminal_set_size</link>               (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="glong">glong</link> columns,
                                                         <link linkend="glong">glong</link> rows);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-audible-bell">vte_terminal_set_audible_bell</link>       (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> is_audible);
<link linkend="gboolean">gboolean</link>            <link linkend="vte-terminal-get-audible-bell">vte_terminal_get_audible_bell</link>       (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-visible-bell">vte_terminal_set_visible_bell</link>       (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> is_visible);
<link linkend="gboolean">gboolean</link>            <link linkend="vte-terminal-get-visible-bell">vte_terminal_get_visible_bell</link>       (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-allow-bold">vte_terminal_set_allow_bold</link>         (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> allow_bold);
<link linkend="gboolean">gboolean</link>            <link linkend="vte-terminal-get-allow-bold">vte_terminal_get_allow_bold</link>         (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-scroll-on-output">vte_terminal_set_scroll_on_output</link>   (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> scroll);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-scroll-on-keystroke">vte_terminal_set_scroll_on_keystroke</link>
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> scroll);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-color-bold">vte_terminal_set_color_bold</link>         (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *bold);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-color-foreground">vte_terminal_set_color_foreground</link>   (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *foreground);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-color-background">vte_terminal_set_color_background</link>   (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *background);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-color-dim">vte_terminal_set_color_dim</link>          (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *dim);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-color-cursor">vte_terminal_set_color_cursor</link>       (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *cursor_background);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-color-highlight">vte_terminal_set_color_highlight</link>    (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *highlight_background);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-colors">vte_terminal_set_colors</link>             (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *foreground,
                                                         const <link linkend="GdkColor">GdkColor</link> *background,
                                                         const <link linkend="GdkColor">GdkColor</link> *palette,
                                                         <link linkend="glong">glong</link> palette_size);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-default-colors">vte_terminal_set_default_colors</link>     (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-opacity">vte_terminal_set_opacity</link>            (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="guint16">guint16</link> opacity);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-background-image">vte_terminal_set_background_image</link>   (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="GdkPixbuf">GdkPixbuf</link> *image);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-background-image-file">vte_terminal_set_background_image_file</link>
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *path);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-background-saturation">vte_terminal_set_background_saturation</link>
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="double">double</link> saturation);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-background-transparent">vte_terminal_set_background_transparent</link>
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> transparent);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-background-tint-color">vte_terminal_set_background_tint_color</link>
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *color);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-scroll-background">vte_terminal_set_scroll_background</link>  (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> scroll);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-cursor-shape">vte_terminal_set_cursor_shape</link>       (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="VteTerminalCursorShape">VteTerminalCursorShape</link> shape);
<link linkend="VteTerminalCursorShape">VteTerminalCursorShape</link>  <link linkend="vte-terminal-get-cursor-shape">vte_terminal_get_cursor_shape</link>   (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-cursor-blinks">vte_terminal_set_cursor_blinks</link>      (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> blink);
<link linkend="VteTerminalCursorBlinkMode">VteTerminalCursorBlinkMode</link>  <link linkend="vte-terminal-get-cursor-blink-mode">vte_terminal_get_cursor_blink_mode</link>
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-cursor-blink-mode">vte_terminal_set_cursor_blink_mode</link>  (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="VteTerminalCursorBlinkMode">VteTerminalCursorBlinkMode</link> mode);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-scrollback-lines">vte_terminal_set_scrollback_lines</link>   (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="glong">glong</link> lines);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-font">vte_terminal_set_font</link>               (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="PangoFontDescription">PangoFontDescription</link> *font_desc);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-font-from-string">vte_terminal_set_font_from_string</link>   (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *name);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-font-from-string-full">vte_terminal_set_font_from_string_full</link>
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *name,
                                                         <link linkend="VteTerminalAntiAlias">VteTerminalAntiAlias</link> antialias);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-font-full">vte_terminal_set_font_full</link>          (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="PangoFontDescription">PangoFontDescription</link> *font_desc,
                                                         <link linkend="VteTerminalAntiAlias">VteTerminalAntiAlias</link> antialias);
const <link linkend="PangoFontDescription">PangoFontDescription</link> * <link linkend="vte-terminal-get-font">vte_terminal_get_font</link>      (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="gboolean">gboolean</link>            <link linkend="vte-terminal-get-using-xft">vte_terminal_get_using_xft</link>          (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="gboolean">gboolean</link>            <link linkend="vte-terminal-get-has-selection">vte_terminal_get_has_selection</link>      (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-word-chars">vte_terminal_set_word_chars</link>         (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *spec);
<link linkend="gboolean">gboolean</link>            <link linkend="vte-terminal-is-word-char">vte_terminal_is_word_char</link>           (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gunichar">gunichar</link> c);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-backspace-binding">vte_terminal_set_backspace_binding</link>  (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="VteTerminalEraseBinding">VteTerminalEraseBinding</link> binding);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-delete-binding">vte_terminal_set_delete_binding</link>     (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="VteTerminalEraseBinding">VteTerminalEraseBinding</link> binding);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-mouse-autohide">vte_terminal_set_mouse_autohide</link>     (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> setting);
<link linkend="gboolean">gboolean</link>            <link linkend="vte-terminal-get-mouse-autohide">vte_terminal_get_mouse_autohide</link>     (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-reset">vte_terminal_reset</link>                  (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> full,
                                                         <link linkend="gboolean">gboolean</link> clear_history);
<link linkend="char">char</link> *              <link linkend="vte-terminal-get-text">vte_terminal_get_text</link>               (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="VteSelectionFunc">VteSelectionFunc</link> is_selected,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="GArray">GArray</link> *attributes);
<link linkend="char">char</link> *              <link linkend="vte-terminal-get-text-include-trailing-spaces">vte_terminal_get_text_include_trailing_spaces</link>
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="VteSelectionFunc">VteSelectionFunc</link> is_selected,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="GArray">GArray</link> *attributes);
<link linkend="char">char</link> *              <link linkend="vte-terminal-get-text-range">vte_terminal_get_text_range</link>         (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="glong">glong</link> start_row,
                                                         <link linkend="glong">glong</link> start_col,
                                                         <link linkend="glong">glong</link> end_row,
                                                         <link linkend="glong">glong</link> end_col,
                                                         <link linkend="VteSelectionFunc">VteSelectionFunc</link> is_selected,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="GArray">GArray</link> *attributes);
<link linkend="gboolean">gboolean</link>            (<link linkend="VteSelectionFunc">*VteSelectionFunc</link>)                 (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="glong">glong</link> column,
                                                         <link linkend="glong">glong</link> row,
                                                         <link linkend="gpointer">gpointer</link> data);
<link linkend="void">void</link>                <link linkend="vte-terminal-get-cursor-position">vte_terminal_get_cursor_position</link>    (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="glong">glong</link> *column,
                                                         <link linkend="glong">glong</link> *row);
<link linkend="void">void</link>                <link linkend="vte-terminal-match-clear-all">vte_terminal_match_clear_all</link>        (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="int">int</link>                 <link linkend="vte-terminal-match-add">vte_terminal_match_add</link>              (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *match);
<link linkend="int">int</link>                 <link linkend="vte-terminal-match-add-gregex">vte_terminal_match_add_gregex</link>       (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="GRegex">GRegex</link> *regex,
                                                         <link linkend="GRegexMatchFlags">GRegexMatchFlags</link> flags);
<link linkend="void">void</link>                <link linkend="vte-terminal-match-remove">vte_terminal_match_remove</link>           (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="int">int</link> tag);
<link linkend="char">char</link> *              <link linkend="vte-terminal-match-check">vte_terminal_match_check</link>            (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="glong">glong</link> column,
                                                         <link linkend="glong">glong</link> row,
                                                         <link linkend="int">int</link> *tag);
<link linkend="void">void</link>                <link linkend="vte-terminal-match-set-cursor">vte_terminal_match_set_cursor</link>       (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="int">int</link> tag,
                                                         <link linkend="GdkCursor">GdkCursor</link> *cursor);
<link linkend="void">void</link>                <link linkend="vte-terminal-match-set-cursor-type">vte_terminal_match_set_cursor_type</link>  (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="int">int</link> tag,
                                                         <link linkend="GdkCursorType">GdkCursorType</link> cursor_type);
<link linkend="void">void</link>                <link linkend="vte-terminal-match-set-cursor-name">vte_terminal_match_set_cursor_name</link>  (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="int">int</link> tag,
                                                         const <link linkend="char">char</link> *cursor_name);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-emulation">vte_terminal_set_emulation</link>          (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *emulation);
const <link linkend="char">char</link> *        <link linkend="vte-terminal-get-emulation">vte_terminal_get_emulation</link>          (<link linkend="VteTerminal">VteTerminal</link> *terminal);
const <link linkend="char">char</link> *        <link linkend="vte-terminal-get-default-emulation">vte_terminal_get_default_emulation</link>  (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-set-encoding">vte_terminal_set_encoding</link>           (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *codeset);
const <link linkend="char">char</link> *        <link linkend="vte-terminal-get-encoding">vte_terminal_get_encoding</link>           (<link linkend="VteTerminal">VteTerminal</link> *terminal);
const <link linkend="char">char</link> *        <link linkend="vte-terminal-get-status-line">vte_terminal_get_status_line</link>        (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="void">void</link>                <link linkend="vte-terminal-get-padding">vte_terminal_get_padding</link>            (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="int">int</link> *xpad,
                                                         <link linkend="int">int</link> *ypad);


<link linkend="GtkAdjustment">GtkAdjustment</link> *     <link linkend="vte-terminal-get-adjustment">vte_terminal_get_adjustment</link>         (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="glong">glong</link>               <link linkend="vte-terminal-get-char-ascent">vte_terminal_get_char_ascent</link>        (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="glong">glong</link>               <link linkend="vte-terminal-get-char-descent">vte_terminal_get_char_descent</link>       (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="glong">glong</link>               <link linkend="vte-terminal-get-char-height">vte_terminal_get_char_height</link>        (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="glong">glong</link>               <link linkend="vte-terminal-get-char-width">vte_terminal_get_char_width</link>         (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="glong">glong</link>               <link linkend="vte-terminal-get-column-count">vte_terminal_get_column_count</link>       (<link linkend="VteTerminal">VteTerminal</link> *terminal);
const <link linkend="char">char</link> *        <link linkend="vte-terminal-get-icon-title">vte_terminal_get_icon_title</link>         (<link linkend="VteTerminal">VteTerminal</link> *terminal);
<link linkend="glong">glong</link>               <link linkend="vte-terminal-get-row-count">vte_terminal_get_row_count</link>          (<link linkend="VteTerminal">VteTerminal</link> *terminal);
const <link linkend="char">char</link> *        <link linkend="vte-terminal-get-window-title">vte_terminal_get_window_title</link>       (<link linkend="VteTerminal">VteTerminal</link> *terminal);
</synopsis>
</refsynopsisdiv>

<refsect1 id="VteTerminal.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="GInitiallyUnowned">GInitiallyUnowned</link>
         +----<link linkend="GtkObject">GtkObject</link>
               +----<link linkend="GtkWidget">GtkWidget</link>
                     +----VteTerminal
</synopsis>
</refsect1>



<refsect1 id="VteTerminal.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
VteTerminal implements
 <link linkend="AtkImplementorIface">AtkImplementorIface</link> and  <link linkend="GtkBuildable">GtkBuildable</link>.</para>
</refsect1>


<refsect1 id="VteTerminal.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="VteTerminal--allow-bold">allow-bold</link>&quot;               <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="VteTerminal--audible-bell">audible-bell</link>&quot;             <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="VteTerminal--background-image-file">background-image-file</link>&quot;    <link linkend="gchar">gchar</link>*                : Read / Write
  &quot;<link linkend="VteTerminal--background-image-pixbuf">background-image-pixbuf</link>&quot;  <link linkend="GdkPixbuf">GdkPixbuf</link>*            : Read / Write
  &quot;<link linkend="VteTerminal--background-opacity">background-opacity</link>&quot;       <link linkend="gdouble">gdouble</link>               : Read / Write
  &quot;<link linkend="VteTerminal--background-saturation">background-saturation</link>&quot;    <link linkend="gdouble">gdouble</link>               : Read / Write
  &quot;<link linkend="VteTerminal--background-tint-color">background-tint-color</link>&quot;    <link linkend="GdkColor">GdkColor</link>*             : Read / Write
  &quot;<link linkend="VteTerminal--background-transparent">background-transparent</link>&quot;   <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="VteTerminal--backspace-binding">backspace-binding</link>&quot;        <link linkend="VteTerminalEraseBinding">VteTerminalEraseBinding</link>  : Read / Write
  &quot;<link linkend="VteTerminal--cursor-blink-mode">cursor-blink-mode</link>&quot;        <link linkend="VteTerminalCursorBlinkMode">VteTerminalCursorBlinkMode</link>  : Read / Write
  &quot;<link linkend="VteTerminal--cursor-shape">cursor-shape</link>&quot;             <link linkend="VteTerminalCursorShape">VteTerminalCursorShape</link>  : Read / Write
  &quot;<link linkend="VteTerminal--delete-binding">delete-binding</link>&quot;           <link linkend="VteTerminalEraseBinding">VteTerminalEraseBinding</link>  : Read / Write
  &quot;<link linkend="VteTerminal--emulation">emulation</link>&quot;                <link linkend="gchar">gchar</link>*                : Read / Write
  &quot;<link linkend="VteTerminal--encoding">encoding</link>&quot;                 <link linkend="gchar">gchar</link>*                : Read / Write
  &quot;<link linkend="VteTerminal--font-desc">font-desc</link>&quot;                <link linkend="PangoFontDescription">PangoFontDescription</link>*  : Read / Write
  &quot;<link linkend="VteTerminal--icon-title">icon-title</link>&quot;               <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="VteTerminal--pointer-autohide">pointer-autohide</link>&quot;         <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="VteTerminal--pty">pty</link>&quot;                      <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="VteTerminal--scroll-background">scroll-background</link>&quot;        <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="VteTerminal--scroll-on-keystroke">scroll-on-keystroke</link>&quot;      <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="VteTerminal--scroll-on-output">scroll-on-output</link>&quot;         <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="VteTerminal--scrollback-lines">scrollback-lines</link>&quot;         <link linkend="guint">guint</link>                 : Read / Write
  &quot;<link linkend="VteTerminal--visible-bell">visible-bell</link>&quot;             <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="VteTerminal--window-title">window-title</link>&quot;             <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="VteTerminal--word-chars">word-chars</link>&quot;               <link linkend="gchar">gchar</link>*                : Read / Write
</synopsis>
</refsect1>

<refsect1 id="VteTerminal.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="VteTerminal-beep">beep</link>&quot;                                           : Run Last
  &quot;<link linkend="VteTerminal-char-size-changed">char-size-changed</link>&quot;                              : Run Last
  &quot;<link linkend="VteTerminal-child-exited">child-exited</link>&quot;                                   : Run Last
  &quot;<link linkend="VteTerminal-commit">commit</link>&quot;                                         : Run Last
  &quot;<link linkend="VteTerminal-contents-changed">contents-changed</link>&quot;                               : Run Last
  &quot;<link linkend="VteTerminal-copy-clipboard">copy-clipboard</link>&quot;                                 : Run Last / Action
  &quot;<link linkend="VteTerminal-cursor-moved">cursor-moved</link>&quot;                                   : Run Last
  &quot;<link linkend="VteTerminal-decrease-font-size">decrease-font-size</link>&quot;                             : Run Last
  &quot;<link linkend="VteTerminal-deiconify-window">deiconify-window</link>&quot;                               : Run Last
  &quot;<link linkend="VteTerminal-emulation-changed">emulation-changed</link>&quot;                              : Run Last
  &quot;<link linkend="VteTerminal-encoding-changed">encoding-changed</link>&quot;                               : Run Last
  &quot;<link linkend="VteTerminal-eof">eof</link>&quot;                                            : Run Last
  &quot;<link linkend="VteTerminal-icon-title-changed">icon-title-changed</link>&quot;                             : Run Last
  &quot;<link linkend="VteTerminal-iconify-window">iconify-window</link>&quot;                                 : Run Last
  &quot;<link linkend="VteTerminal-increase-font-size">increase-font-size</link>&quot;                             : Run Last
  &quot;<link linkend="VteTerminal-lower-window">lower-window</link>&quot;                                   : Run Last
  &quot;<link linkend="VteTerminal-maximize-window">maximize-window</link>&quot;                                : Run Last
  &quot;<link linkend="VteTerminal-move-window">move-window</link>&quot;                                    : Run Last
  &quot;<link linkend="VteTerminal-paste-clipboard">paste-clipboard</link>&quot;                                : Run Last / Action
  &quot;<link linkend="VteTerminal-raise-window">raise-window</link>&quot;                                   : Run Last
  &quot;<link linkend="VteTerminal-refresh-window">refresh-window</link>&quot;                                 : Run Last
  &quot;<link linkend="VteTerminal-resize-window">resize-window</link>&quot;                                  : Run Last
  &quot;<link linkend="VteTerminal-restore-window">restore-window</link>&quot;                                 : Run Last
  &quot;<link linkend="VteTerminal-selection-changed">selection-changed</link>&quot;                              : Run Last
  &quot;<link linkend="VteTerminal-set-scroll-adjustments">set-scroll-adjustments</link>&quot;                         : Run Last
  &quot;<link linkend="VteTerminal-status-line-changed">status-line-changed</link>&quot;                            : Run Last
  &quot;<link linkend="VteTerminal-text-deleted">text-deleted</link>&quot;                                   : Run Last
  &quot;<link linkend="VteTerminal-text-inserted">text-inserted</link>&quot;                                  : Run Last
  &quot;<link linkend="VteTerminal-text-modified">text-modified</link>&quot;                                  : Run Last
  &quot;<link linkend="VteTerminal-text-scrolled">text-scrolled</link>&quot;                                  : Run Last
  &quot;<link linkend="VteTerminal-window-title-changed">window-title-changed</link>&quot;                           : Run Last
</synopsis>
</refsect1>


<refsect1 id="VteTerminal.description" role="desc">
<title role="desc.title">Description</title>
<para>
A VteTerminal is a terminal emulator implemented as a GTK2 widget.
</para>
</refsect1>

<refsect1 id="VteTerminal.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="VteTerminal-struct" role="struct">
<title>VteTerminal</title>
<indexterm zone="VteTerminal-struct"><primary sortas="VteTerminal">VteTerminal</primary></indexterm><programlisting>typedef struct {
	/* Widget implementation stuffs. */
	GtkWidget widget;
	GtkAdjustment *adjustment;	/* Scrolling adjustment. */

	/* Metric and sizing data. */
	glong char_width, char_height;	/* dimensions of character cells */
	glong char_ascent, char_descent; /* important font metrics */
	glong row_count, column_count;	/* dimensions of the window */

	/* Titles. */
	char *window_title;
	char *icon_title;
} VteTerminal;
</programlisting>
<para>
All of these fields should be considered read-only.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GtkWidget">GtkWidget</link>&#160;<structfield>widget</structfield>;</term>
<listitem><simpara>Base <link linkend="GtkWidget"><type>GtkWidget</type></link> of the terminal widget.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GtkAdjustment">GtkAdjustment</link>&#160;*<structfield>adjustment</structfield>;</term>
<listitem><simpara>Scroll bar adjustments.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="glong">glong</link>&#160;<structfield>char_width</structfield>;</term>
<listitem><simpara>Width of a narrow character cell.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="glong">glong</link>&#160;<structfield>char_height</structfield>;</term>
<listitem><simpara>Height of a character cell.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="glong">glong</link>&#160;<structfield>char_ascent</structfield>;</term>
<listitem><simpara>The distance (in pixels) from the baseline of drawn text to the top of the character cell.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="glong">glong</link>&#160;<structfield>char_descent</structfield>;</term>
<listitem><simpara>The distance (in pixels) from the baseline of drawn text to the bottom of the character cell.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="glong">glong</link>&#160;<structfield>row_count</structfield>;</term>
<listitem><simpara>Number of visible rows.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="glong">glong</link>&#160;<structfield>column_count</structfield>;</term>
<listitem><simpara>Number of visible columns.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="char">char</link>&#160;*<structfield>window_title</structfield>;</term>
<listitem><simpara>The terminal's idea of what the window's title should be.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="char">char</link>&#160;*<structfield>icon_title</structfield>;</term>
<listitem><simpara>The terminal's idea of what the window's title should be when iconified.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="VteTerminalEraseBinding" role="enum">
<title>enum VteTerminalEraseBinding</title>
<indexterm zone="VteTerminalEraseBinding"><primary sortas="VteTerminalEraseBinding">VteTerminalEraseBinding</primary></indexterm><programlisting>typedef enum {
	VTE_ERASE_AUTO,
	VTE_ERASE_ASCII_BACKSPACE,
	VTE_ERASE_ASCII_DELETE,
	VTE_ERASE_DELETE_SEQUENCE,
	VTE_ERASE_TTY
} VteTerminalEraseBinding;
</programlisting>
<para>
An enumerated type which can be used to indicate which string the terminal
should send to an application when the user presses the Delete or Backspace
keys.
</para><variablelist role="enum">
<varlistentry id="VTE-ERASE-AUTO--CAPS" role="constant">
<term><literal>VTE_ERASE_AUTO</literal></term>
<listitem><simpara>For backspace, attempt to determine the right value from the terminal's IO settings.  For delete, use the control sequence.
</simpara></listitem>
</varlistentry>
<varlistentry id="VTE-ERASE-ASCII-BACKSPACE--CAPS" role="constant">
<term><literal>VTE_ERASE_ASCII_BACKSPACE</literal></term>
<listitem><simpara>Send an ASCII backspace character (0x08).
</simpara></listitem>
</varlistentry>
<varlistentry id="VTE-ERASE-ASCII-DELETE--CAPS" role="constant">
<term><literal>VTE_ERASE_ASCII_DELETE</literal></term>
<listitem><simpara>Send an ASCII delete character (0x7F).
</simpara></listitem>
</varlistentry>
<varlistentry id="VTE-ERASE-DELETE-SEQUENCE--CAPS" role="constant">
<term><literal>VTE_ERASE_DELETE_SEQUENCE</literal></term>
<listitem><simpara>Send the "@<parameter>7</parameter>" control sequence.
</simpara></listitem>
</varlistentry>
<varlistentry id="VTE-ERASE-TTY--CAPS" role="constant">
<term><literal>VTE_ERASE_TTY</literal></term>
<listitem><simpara>Send terminal's "erase" setting.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="VteTerminalCursorShape" role="enum">
<title>enum VteTerminalCursorShape</title>
<indexterm zone="VteTerminalCursorShape"><primary sortas="VteTerminalCursorShape">VteTerminalCursorShape</primary></indexterm><programlisting>typedef enum {
        VTE_CURSOR_SHAPE_BLOCK,
        VTE_CURSOR_SHAPE_IBEAM,
        VTE_CURSOR_SHAPE_UNDERLINE
} VteTerminalCursorShape;
</programlisting>
<para>
An enumerated type which can be used to indicate what should the terminal
draw at the cursor position.
</para><variablelist role="enum">
<varlistentry id="VTE-CURSOR-SHAPE-BLOCK--CAPS" role="constant">
<term><literal>VTE_CURSOR_SHAPE_BLOCK</literal></term>
<listitem><simpara>Draw a block cursor.  This is the default.
</simpara></listitem>
</varlistentry>
<varlistentry id="VTE-CURSOR-SHAPE-IBEAM--CAPS" role="constant">
<term><literal>VTE_CURSOR_SHAPE_IBEAM</literal></term>
<listitem><simpara>Draw a vertical bar on the left side of character.
This is similar to the default cursor for other GTK+ widgets.
</simpara></listitem>
</varlistentry>
<varlistentry id="VTE-CURSOR-SHAPE-UNDERLINE--CAPS" role="constant">
<term><literal>VTE_CURSOR_SHAPE_UNDERLINE</literal></term>
<listitem><simpara>Draw a horizontal bar below the character.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="VteTerminalCursorBlinkMode" role="enum">
<title>enum VteTerminalCursorBlinkMode</title>
<indexterm zone="VteTerminalCursorBlinkMode"><primary sortas="VteTerminalCursorBlinkMode">VteTerminalCursorBlinkMode</primary></indexterm><programlisting>typedef enum {
        VTE_CURSOR_BLINK_SYSTEM,
        VTE_CURSOR_BLINK_ON,
        VTE_CURSOR_BLINK_OFF
} VteTerminalCursorBlinkMode;
</programlisting>
<para>
An enumerated type which can be used to indicate the cursor blink mode
for the terminal.
</para><variablelist role="enum">
<varlistentry id="VTE-CURSOR-BLINK-SYSTEM--CAPS" role="constant">
<term><literal>VTE_CURSOR_BLINK_SYSTEM</literal></term>
<listitem><simpara>Follow GTK+ settings for cursor blinking.
</simpara></listitem>
</varlistentry>
<varlistentry id="VTE-CURSOR-BLINK-ON--CAPS" role="constant">
<term><literal>VTE_CURSOR_BLINK_ON</literal></term>
<listitem><simpara>Cursor blinks.
</simpara></listitem>
</varlistentry>
<varlistentry id="VTE-CURSOR-BLINK-OFF--CAPS" role="constant">
<term><literal>VTE_CURSOR_BLINK_OFF</literal></term>
<listitem><simpara>Cursor does not blink.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-new" role="function">
<title>vte_terminal_new ()</title>
<indexterm zone="vte-terminal-new"><primary sortas="vte_terminal_new">vte_terminal_new</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link> *         vte_terminal_new                    (void);</programlisting>
<para>
Create a new terminal widget.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new <link linkend="VteTerminal"><type>VteTerminal</type></link> object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-im-append-menuitems" role="function">
<title>vte_terminal_im_append_menuitems ()</title>
<indexterm zone="vte-terminal-im-append-menuitems"><primary sortas="vte_terminal_im_append_menuitems">vte_terminal_im_append_menuitems</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_im_append_menuitems    (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="GtkMenuShell">GtkMenuShell</link> *menushell);</programlisting>
<para>
Appends menu items for various input methods to the given menu.  The
user can select one of these items to modify the input method used by
the terminal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>menushell</parameter>&#160;:</term>
<listitem><simpara> a GtkMenuShell
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-fork-command" role="function">
<title>vte_terminal_fork_command ()</title>
<indexterm zone="vte-terminal-fork-command"><primary sortas="vte_terminal_fork_command">vte_terminal_fork_command</primary></indexterm><programlisting><link linkend="pid-t">pid_t</link>               vte_terminal_fork_command           (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *command,
                                                         <link linkend="char">char</link> **argv,
                                                         <link linkend="char">char</link> **envv,
                                                         const <link linkend="char">char</link> *directory,
                                                         <link linkend="gboolean">gboolean</link> lastlog,
                                                         <link linkend="gboolean">gboolean</link> utmp,
                                                         <link linkend="gboolean">gboolean</link> wtmp);</programlisting>
<para>
Starts the specified command under a newly-allocated controlling
pseudo-terminal.  The <parameter>argv</parameter> and <parameter>envv</parameter> lists should be <link linkend="NULL--CAPS"><literal>NULL</literal></link>-terminated, and
argv[0] is expected to be the name of the file being run, as it would be if
<link linkend="execve"><function>execve()</function></link> were being called.  TERM is automatically set to reflect the
terminal widget's emulation setting.  If <parameter>lastlog</parameter>, <parameter>utmp</parameter>, or <parameter>wtmp</parameter> are <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>,
logs the session to the specified system log files.
</para>
<para>
Note that all file descriptors except stdin/stdout/stderr will be closed
before calling <link linkend="exec"><function>exec()</function></link> in the child.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>command</parameter>&#160;:</term>
<listitem><simpara> the name of a binary to run, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to get user's shell
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argv</parameter>&#160;:</term>
<listitem><simpara> the argument list to be passed to <parameter>command</parameter>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>envv</parameter>&#160;:</term>
<listitem><simpara> a list of environment variables to be added to the environment before
starting <parameter>command</parameter>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>directory</parameter>&#160;:</term>
<listitem><simpara> the name of a directory the command should start in, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>lastlog</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the session should be logged to the lastlog
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>utmp</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the session should be logged to the utmp/utmpx log
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>wtmp</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the session should be logged to the wtmp/wtmpx log
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the ID of the new process
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-forkpty" role="function" condition="since:0.11.11">
<title>vte_terminal_forkpty ()</title>
<indexterm zone="vte-terminal-forkpty" role="0.11.11"><primary sortas="vte_terminal_forkpty">vte_terminal_forkpty</primary></indexterm><programlisting><link linkend="pid-t">pid_t</link>               vte_terminal_forkpty                (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="char">char</link> **envv,
                                                         const <link linkend="char">char</link> *directory,
                                                         <link linkend="gboolean">gboolean</link> lastlog,
                                                         <link linkend="gboolean">gboolean</link> utmp,
                                                         <link linkend="gboolean">gboolean</link> wtmp);</programlisting>
<para>
Starts a new child process under a newly-allocated controlling
pseudo-terminal.  TERM is automatically set to reflect the terminal widget's
emulation setting.  If <parameter>lastlog</parameter>, <parameter>utmp</parameter>, or <parameter>wtmp</parameter> are <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, logs the session
to the specified system log files.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>envv</parameter>&#160;:</term>
<listitem><simpara> a list of environment variables to be added to the environment before
starting returning in the child process, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>directory</parameter>&#160;:</term>
<listitem><simpara> the name of a directory the child process should change to, or
<link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>lastlog</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the session should be logged to the lastlog
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>utmp</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the session should be logged to the utmp/utmpx log
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>wtmp</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the session should be logged to the wtmp/wtmpx log
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the ID of the new process in the parent, 0 in the child, and -1 if
there was an error

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.11.11</para></refsect2>
<refsect2 id="vte-terminal-set-pty" role="function" condition="since:0.12.1">
<title>vte_terminal_set_pty ()</title>
<indexterm zone="vte-terminal-set-pty" role="0.12.1"><primary sortas="vte_terminal_set_pty">vte_terminal_set_pty</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_pty                (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="int">int</link> pty_master);</programlisting>
<para>
Attach an existing PTY master side to the terminal widget.  Use
instead of <link linkend="vte-terminal-fork-command"><function>vte_terminal_fork_command()</function></link> or <link linkend="vte-terminal-forkpty"><function>vte_terminal_forkpty()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pty_master</parameter>&#160;:</term>
<listitem><simpara> a file descriptor of the master end of a PTY
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.12.1</para></refsect2>
<refsect2 id="vte-terminal-get-pty" role="function" condition="since:0.19.1">
<title>vte_terminal_get_pty ()</title>
<indexterm zone="vte-terminal-get-pty" role="0.19.1"><primary sortas="vte_terminal_get_pty">vte_terminal_get_pty</primary></indexterm><programlisting><link linkend="int">int</link>                 vte_terminal_get_pty                (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Returns the file descriptor of the master end of <parameter>terminal</parameter>'s PTY.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the file descriptor, or -1 if the terminal has no PTY.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.19.1</para></refsect2>
<refsect2 id="vte-terminal-feed" role="function">
<title>vte_terminal_feed ()</title>
<indexterm zone="vte-terminal-feed"><primary sortas="vte_terminal_feed">vte_terminal_feed</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_feed                   (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *data,
                                                         <link linkend="glong">glong</link> length);</programlisting>
<para>
Interprets <parameter>data</parameter> as if it were data received from a child process.  This
can either be used to drive the terminal without a child process, or just
to mess with your users.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> a string in the terminal's current encoding
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara> the length of the string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-feed-child" role="function">
<title>vte_terminal_feed_child ()</title>
<indexterm zone="vte-terminal-feed-child"><primary sortas="vte_terminal_feed_child">vte_terminal_feed_child</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_feed_child             (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *text,
                                                         <link linkend="glong">glong</link> length);</programlisting>
<para>
Sends a block of UTF-8 text to the child as if it were entered by the user
at the keyboard.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>text</parameter>&#160;:</term>
<listitem><simpara> data to send to the child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara> length of <parameter>text</parameter> in bytes, or -1 if <parameter>text</parameter> is NUL-terminated
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-feed-child-binary" role="function" condition="since:0.12.1">
<title>vte_terminal_feed_child_binary ()</title>
<indexterm zone="vte-terminal-feed-child-binary" role="0.12.1"><primary sortas="vte_terminal_feed_child_binary">vte_terminal_feed_child_binary</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_feed_child_binary      (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *data,
                                                         <link linkend="glong">glong</link> length);</programlisting>
<para>
Sends a block of binary data to the child.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> data to send to the child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara> length of <parameter>data</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.12.1</para></refsect2>
<refsect2 id="vte-terminal-get-child-exit-status" role="function" condition="since:0.19.1">
<title>vte_terminal_get_child_exit_status ()</title>
<indexterm zone="vte-terminal-get-child-exit-status" role="0.19.1"><primary sortas="vte_terminal_get_child_exit_status">vte_terminal_get_child_exit_status</primary></indexterm><programlisting><link linkend="int">int</link>                 vte_terminal_get_child_exit_status  (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Gets the exit status of the command started by <link linkend="vte-terminal-fork-command"><function>vte_terminal_fork_command()</function></link>.
See your C library's documentation for more details on how to interpret the
exit status.
</para>
<para>
Note that this function may only be called from the signal handler of
the "child-exited" signal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the child's exit status

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.19.1</para></refsect2>
<refsect2 id="vte-terminal-select-all" role="function" condition="since:0.16">
<title>vte_terminal_select_all ()</title>
<indexterm zone="vte-terminal-select-all" role="0.16"><primary sortas="vte_terminal_select_all">vte_terminal_select_all</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_select_all             (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Selects all text within the terminal (including the scrollback buffer).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.16</para></refsect2>
<refsect2 id="vte-terminal-select-none" role="function" condition="since:0.16">
<title>vte_terminal_select_none ()</title>
<indexterm zone="vte-terminal-select-none" role="0.16"><primary sortas="vte_terminal_select_none">vte_terminal_select_none</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_select_none            (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Clears the current selection.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.16</para></refsect2>
<refsect2 id="vte-terminal-copy-clipboard" role="function">
<title>vte_terminal_copy_clipboard ()</title>
<indexterm zone="vte-terminal-copy-clipboard"><primary sortas="vte_terminal_copy_clipboard">vte_terminal_copy_clipboard</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_copy_clipboard         (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Places the selected text in the terminal in the <link linkend="GDK-SELECTION-CLIPBOARD--CAPS"><type>GDK_SELECTION_CLIPBOARD</type></link>
selection.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-paste-clipboard" role="function">
<title>vte_terminal_paste_clipboard ()</title>
<indexterm zone="vte-terminal-paste-clipboard"><primary sortas="vte_terminal_paste_clipboard">vte_terminal_paste_clipboard</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_paste_clipboard        (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Sends the contents of the <link linkend="GDK-SELECTION-CLIPBOARD--CAPS"><type>GDK_SELECTION_CLIPBOARD</type></link> selection to the
terminal's child.  If necessary, the data is converted from UTF-8 to the
terminal's current encoding. It's called on paste menu item, or when
user presses Shift+Insert.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-copy-primary" role="function">
<title>vte_terminal_copy_primary ()</title>
<indexterm zone="vte-terminal-copy-primary"><primary sortas="vte_terminal_copy_primary">vte_terminal_copy_primary</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_copy_primary           (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Places the selected text in the terminal in the <link linkend="GDK-SELECTION-PRIMARY--CAPS"><type>GDK_SELECTION_PRIMARY</type></link>
selection.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-paste-primary" role="function">
<title>vte_terminal_paste_primary ()</title>
<indexterm zone="vte-terminal-paste-primary"><primary sortas="vte_terminal_paste_primary">vte_terminal_paste_primary</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_paste_primary          (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Sends the contents of the <link linkend="GDK-SELECTION-PRIMARY--CAPS"><type>GDK_SELECTION_PRIMARY</type></link> selection to the terminal's
child.  If necessary, the data is converted from UTF-8 to the terminal's
current encoding.  The terminal will call also paste the
<link linkend="GDK-SELECTION-PRIMARY--CAPS"><type>GDK_SELECTION_PRIMARY</type></link> selection when the user clicks with the the second
mouse button.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-size" role="function">
<title>vte_terminal_set_size ()</title>
<indexterm zone="vte-terminal-set-size"><primary sortas="vte_terminal_set_size">vte_terminal_set_size</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_size               (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="glong">glong</link> columns,
                                                         <link linkend="glong">glong</link> rows);</programlisting>
<para>
Attempts to change the terminal's size in terms of rows and columns.  If
the attempt succeeds, the widget will resize itself to the proper size.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>columns</parameter>&#160;:</term>
<listitem><simpara> the desired number of columns
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rows</parameter>&#160;:</term>
<listitem><simpara> the desired number of rows
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-audible-bell" role="function">
<title>vte_terminal_set_audible_bell ()</title>
<indexterm zone="vte-terminal-set-audible-bell"><primary sortas="vte_terminal_set_audible_bell">vte_terminal_set_audible_bell</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_audible_bell       (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> is_audible);</programlisting>
<para>
Controls whether or not the terminal will beep when the child outputs the
"bl" sequence.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>is_audible</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the terminal should beep
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-audible-bell" role="function">
<title>vte_terminal_get_audible_bell ()</title>
<indexterm zone="vte-terminal-get-audible-bell"><primary sortas="vte_terminal_get_audible_bell">vte_terminal_get_audible_bell</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            vte_terminal_get_audible_bell       (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Checks whether or not the terminal will beep when the child outputs the
"bl" sequence.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if audible bell is enabled, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if not
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-visible-bell" role="function">
<title>vte_terminal_set_visible_bell ()</title>
<indexterm zone="vte-terminal-set-visible-bell"><primary sortas="vte_terminal_set_visible_bell">vte_terminal_set_visible_bell</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_visible_bell       (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> is_visible);</programlisting>
<para>
Controls whether or not the terminal will present a visible bell to the
user when the child outputs the "bl" sequence.  The terminal
will clear itself to the default foreground color and then repaint itself.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>is_visible</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the terminal should flash
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-visible-bell" role="function">
<title>vte_terminal_get_visible_bell ()</title>
<indexterm zone="vte-terminal-get-visible-bell"><primary sortas="vte_terminal_get_visible_bell">vte_terminal_get_visible_bell</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            vte_terminal_get_visible_bell       (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Checks whether or not the terminal will present a visible bell to the
user when the child outputs the "bl" sequence.  The terminal
will clear itself to the default foreground color and then repaint itself.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if visible bell is enabled, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if not
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-allow-bold" role="function">
<title>vte_terminal_set_allow_bold ()</title>
<indexterm zone="vte-terminal-set-allow-bold"><primary sortas="vte_terminal_set_allow_bold">vte_terminal_set_allow_bold</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_allow_bold         (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> allow_bold);</programlisting>
<para>
Controls whether or not the terminal will attempt to draw bold text,
either by using a bold font variant or by repainting text with a different
offset.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>allow_bold</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the terminal should attempt to draw bold text
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-allow-bold" role="function">
<title>vte_terminal_get_allow_bold ()</title>
<indexterm zone="vte-terminal-get-allow-bold"><primary sortas="vte_terminal_get_allow_bold">vte_terminal_get_allow_bold</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            vte_terminal_get_allow_bold         (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Checks whether or not the terminal will attempt to draw bold text by
repainting text with a one-pixel offset.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if bolding is enabled, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if not
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-scroll-on-output" role="function">
<title>vte_terminal_set_scroll_on_output ()</title>
<indexterm zone="vte-terminal-set-scroll-on-output"><primary sortas="vte_terminal_set_scroll_on_output">vte_terminal_set_scroll_on_output</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_scroll_on_output   (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> scroll);</programlisting>
<para>
Controls whether or not the terminal will forcibly scroll to the bottom of
the viewable history when the new data is received from the child.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scroll</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the terminal should scroll on output
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-scroll-on-keystroke" role="function">
<title>vte_terminal_set_scroll_on_keystroke ()</title>
<indexterm zone="vte-terminal-set-scroll-on-keystroke"><primary sortas="vte_terminal_set_scroll_on_keystroke">vte_terminal_set_scroll_on_keystroke</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_scroll_on_keystroke
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> scroll);</programlisting>
<para>
Controls whether or not the terminal will forcibly scroll to the bottom of
the viewable history when the user presses a key.  Modifier keys do not
trigger this behavior.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scroll</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the terminal should scroll on keystrokes
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-color-bold" role="function">
<title>vte_terminal_set_color_bold ()</title>
<indexterm zone="vte-terminal-set-color-bold"><primary sortas="vte_terminal_set_color_bold">vte_terminal_set_color_bold</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_color_bold         (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *bold);</programlisting>
<para>
Sets the color used to draw bold text in the default foreground color.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bold</parameter>&#160;:</term>
<listitem><simpara> the new bold color
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-color-foreground" role="function">
<title>vte_terminal_set_color_foreground ()</title>
<indexterm zone="vte-terminal-set-color-foreground"><primary sortas="vte_terminal_set_color_foreground">vte_terminal_set_color_foreground</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_color_foreground   (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *foreground);</programlisting>
<para>
Sets the foreground color used to draw normal text</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>foreground</parameter>&#160;:</term>
<listitem><simpara> the new foreground color
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-color-background" role="function">
<title>vte_terminal_set_color_background ()</title>
<indexterm zone="vte-terminal-set-color-background"><primary sortas="vte_terminal_set_color_background">vte_terminal_set_color_background</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_color_background   (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *background);</programlisting>
<para>
Sets the background color for text which does not have a specific background
color assigned.  Only has effect when no background image is set and when
the terminal is not transparent.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>background</parameter>&#160;:</term>
<listitem><simpara> the new background color
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-color-dim" role="function">
<title>vte_terminal_set_color_dim ()</title>
<indexterm zone="vte-terminal-set-color-dim"><primary sortas="vte_terminal_set_color_dim">vte_terminal_set_color_dim</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_color_dim          (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *dim);</programlisting>
<para>
Sets the color used to draw dim text in the default foreground color.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dim</parameter>&#160;:</term>
<listitem><simpara> the new dim color
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-color-cursor" role="function" condition="since:0.11.11">
<title>vte_terminal_set_color_cursor ()</title>
<indexterm zone="vte-terminal-set-color-cursor" role="0.11.11"><primary sortas="vte_terminal_set_color_cursor">vte_terminal_set_color_cursor</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_color_cursor       (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *cursor_background);</programlisting>
<para>
Sets the background color for text which is under the cursor.  If <link linkend="NULL--CAPS"><literal>NULL</literal></link>, text
under the cursor will be drawn with foreground and background colors
reversed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cursor_background</parameter>&#160;:</term>
<listitem><simpara> the new color to use for the text cursor
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.11.11</para></refsect2>
<refsect2 id="vte-terminal-set-color-highlight" role="function" condition="since:0.11.11">
<title>vte_terminal_set_color_highlight ()</title>
<indexterm zone="vte-terminal-set-color-highlight" role="0.11.11"><primary sortas="vte_terminal_set_color_highlight">vte_terminal_set_color_highlight</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_color_highlight    (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *highlight_background);</programlisting>
<para>
Sets the background color for text which is highlighted.  If <link linkend="NULL--CAPS"><literal>NULL</literal></link>,
highlighted text (which is usually highlighted because it is selected) will
be drawn with foreground and background colors reversed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>highlight_background</parameter>&#160;:</term>
<listitem><simpara> the new color to use for highlighted text
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.11.11</para></refsect2>
<refsect2 id="vte-terminal-set-colors" role="function">
<title>vte_terminal_set_colors ()</title>
<indexterm zone="vte-terminal-set-colors"><primary sortas="vte_terminal_set_colors">vte_terminal_set_colors</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_colors             (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *foreground,
                                                         const <link linkend="GdkColor">GdkColor</link> *background,
                                                         const <link linkend="GdkColor">GdkColor</link> *palette,
                                                         <link linkend="glong">glong</link> palette_size);</programlisting>
<para>
The terminal widget uses a 28-color model comprised of the default foreground
and background colors, the bold foreground color, the dim foreground
color, an eight color palette, bold versions of the eight color palette,
and a dim version of the the eight color palette.
</para>
<para>
<parameter>palette_size</parameter> must be either 0, 8, 16, or 24, or between 25 and 255 inclusive.
If <parameter>foreground</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link> and
<parameter>palette_size</parameter> is greater than 0, the new foreground color is taken from
<parameter>palette</parameter>[7].  If <parameter>background</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link> and <parameter>palette_size</parameter> is greater than 0,
the new background color is taken from <parameter>palette</parameter>[0].  If
<parameter>palette_size</parameter> is 8 or 16, the third (dim) and possibly the second (bold)
8-color palettes are extrapolated from the new background color and the items
in <parameter>palette</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>foreground</parameter>&#160;:</term>
<listitem><simpara> the new foreground color, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>background</parameter>&#160;:</term>
<listitem><simpara> the new background color, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>palette</parameter>&#160;:</term>
<listitem><simpara> the color palette
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>palette_size</parameter>&#160;:</term>
<listitem><simpara> the number of entries in <parameter>palette</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-default-colors" role="function">
<title>vte_terminal_set_default_colors ()</title>
<indexterm zone="vte-terminal-set-default-colors"><primary sortas="vte_terminal_set_default_colors">vte_terminal_set_default_colors</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_default_colors     (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Reset the terminal palette to reasonable compiled-in defaults.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-opacity" role="function">
<title>vte_terminal_set_opacity ()</title>
<indexterm zone="vte-terminal-set-opacity"><primary sortas="vte_terminal_set_opacity">vte_terminal_set_opacity</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_opacity            (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="guint16">guint16</link> opacity);</programlisting>
<para>
Sets the opacity of the terminal background, were 0 means completely
transparent and 65535 means completely opaque.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opacity</parameter>&#160;:</term>
<listitem><simpara> the new opacity
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-background-image" role="function">
<title>vte_terminal_set_background_image ()</title>
<indexterm zone="vte-terminal-set-background-image"><primary sortas="vte_terminal_set_background_image">vte_terminal_set_background_image</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_background_image   (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="GdkPixbuf">GdkPixbuf</link> *image);</programlisting>
<para>
Sets a background image for the widget.  Text which would otherwise be
drawn using the default background color will instead be drawn over the
specified image.  If necessary, the image will be tiled to cover the
widget's entire visible area. If specified by
<link linkend="vte-terminal-set-background-saturation"><function>vte_terminal_set_background_saturation()</function></link>, the terminal will tint its
in-memory copy of the image before applying it to the terminal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>image</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdkPixbuf"><type>GdkPixbuf</type></link> to use, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to cancel
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-background-image-file" role="function">
<title>vte_terminal_set_background_image_file ()</title>
<indexterm zone="vte-terminal-set-background-image-file"><primary sortas="vte_terminal_set_background_image_file">vte_terminal_set_background_image_file</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_background_image_file
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *path);</programlisting>
<para>
Sets a background image for the widget.  If specified by
<link linkend="vte-terminal-set-background-saturation"><function>vte_terminal_set_background_saturation()</function></link>, the terminal will tint its
in-memory copy of the image before applying it to the terminal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> path to an image file
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-background-saturation" role="function">
<title>vte_terminal_set_background_saturation ()</title>
<indexterm zone="vte-terminal-set-background-saturation"><primary sortas="vte_terminal_set_background_saturation">vte_terminal_set_background_saturation</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_background_saturation
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="double">double</link> saturation);</programlisting>
<para>
If a background image has been set using
<link linkend="vte-terminal-set-background-image"><function>vte_terminal_set_background_image()</function></link>,
<link linkend="vte-terminal-set-background-image-file"><function>vte_terminal_set_background_image_file()</function></link>, or
<link linkend="vte-terminal-set-background-transparent"><function>vte_terminal_set_background_transparent()</function></link>, and the saturation value is less
than 1.0, the terminal will adjust the colors of the image before drawing
the image.  To do so, the terminal will create a copy of the background
image (or snapshot of the root window) and modify its pixel values.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>saturation</parameter>&#160;:</term>
<listitem><simpara> a floating point value between 0.0 and 1.0.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-background-transparent" role="function">
<title>vte_terminal_set_background_transparent ()</title>
<indexterm zone="vte-terminal-set-background-transparent"><primary sortas="vte_terminal_set_background_transparent">vte_terminal_set_background_transparent</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_background_transparent
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> transparent);</programlisting>
<para>
Sets the terminal's background image to the pixmap stored in the root
window, adjusted so that if there are no windows below your application,
the widget will appear to be transparent.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>transparent</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the terminal should fake transparency
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-background-tint-color" role="function" condition="since:0.11">
<title>vte_terminal_set_background_tint_color ()</title>
<indexterm zone="vte-terminal-set-background-tint-color" role="0.11"><primary sortas="vte_terminal_set_background_tint_color">vte_terminal_set_background_tint_color</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_background_tint_color
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="GdkColor">GdkColor</link> *color);</programlisting>
<para>
If a background image has been set using
<link linkend="vte-terminal-set-background-image"><function>vte_terminal_set_background_image()</function></link>,
<link linkend="vte-terminal-set-background-image-file"><function>vte_terminal_set_background_image_file()</function></link>, or
<link linkend="vte-terminal-set-background-transparent"><function>vte_terminal_set_background_transparent()</function></link>, and the value set by
<link linkend="vte-terminal-set-background-saturation"><function>vte_terminal_set_background_saturation()</function></link> is less than one, the terminal
will adjust the color of the image before drawing the image.  To do so,
the terminal will create a copy of the background image (or snapshot of
the root window) and modify its pixel values.  The initial tint color
is black.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&#160;:</term>
<listitem><simpara> a color which the terminal background should be tinted to if its
saturation is not 1.0.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.11</para></refsect2>
<refsect2 id="vte-terminal-set-scroll-background" role="function" condition="since:0.11">
<title>vte_terminal_set_scroll_background ()</title>
<indexterm zone="vte-terminal-set-scroll-background" role="0.11"><primary sortas="vte_terminal_set_scroll_background">vte_terminal_set_scroll_background</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_scroll_background  (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> scroll);</programlisting>
<para>
Controls whether or not the terminal will scroll the background image (if
one is set) when the text in the window must be scrolled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scroll</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the terminal should scroll the background image along with
text.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.11</para></refsect2>
<refsect2 id="vte-terminal-set-cursor-shape" role="function" condition="since:0.19.1">
<title>vte_terminal_set_cursor_shape ()</title>
<indexterm zone="vte-terminal-set-cursor-shape" role="0.19.1"><primary sortas="vte_terminal_set_cursor_shape">vte_terminal_set_cursor_shape</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_cursor_shape       (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="VteTerminalCursorShape">VteTerminalCursorShape</link> shape);</programlisting>
<para>
Sets the shape of the cursor drawn.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>shape</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="VteTerminalCursorShape"><type>VteTerminalCursorShape</type></link> to use
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.19.1</para></refsect2>
<refsect2 id="vte-terminal-get-cursor-shape" role="function" condition="since:0.17.6">
<title>vte_terminal_get_cursor_shape ()</title>
<indexterm zone="vte-terminal-get-cursor-shape" role="0.17.6"><primary sortas="vte_terminal_get_cursor_shape">vte_terminal_get_cursor_shape</primary></indexterm><programlisting><link linkend="VteTerminalCursorShape">VteTerminalCursorShape</link>  vte_terminal_get_cursor_shape   (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Returns the currently set cursor shape.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> cursor shape.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.17.6</para></refsect2>
<refsect2 id="vte-terminal-set-cursor-blinks" role="function" condition="deprecated:0.17.1 Use vte_terminal_set_cursor_blink_mode() instead.">
<title>vte_terminal_set_cursor_blinks ()</title>
<indexterm zone="vte-terminal-set-cursor-blinks" role="deprecated"><primary sortas="vte_terminal_set_cursor_blinks">vte_terminal_set_cursor_blinks</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_cursor_blinks      (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> blink);</programlisting>
<warning><para><literal>vte_terminal_set_cursor_blinks</literal> is deprecated and should not be used in newly-written code. 0.17.1 Use <link linkend="vte-terminal-set-cursor-blink-mode"><function>vte_terminal_set_cursor_blink_mode()</function></link> instead.</para></warning>
<para>
Sets whether or not the cursor will blink.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>blink</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the cursor should blink
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-cursor-blink-mode" role="function" condition="since:0.17.1">
<title>vte_terminal_get_cursor_blink_mode ()</title>
<indexterm zone="vte-terminal-get-cursor-blink-mode" role="0.17.1"><primary sortas="vte_terminal_get_cursor_blink_mode">vte_terminal_get_cursor_blink_mode</primary></indexterm><programlisting><link linkend="VteTerminalCursorBlinkMode">VteTerminalCursorBlinkMode</link>  vte_terminal_get_cursor_blink_mode
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Returns the currently set cursor blink mode.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> cursor blink mode.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.17.1</para></refsect2>
<refsect2 id="vte-terminal-set-cursor-blink-mode" role="function" condition="since:0.17.1">
<title>vte_terminal_set_cursor_blink_mode ()</title>
<indexterm zone="vte-terminal-set-cursor-blink-mode" role="0.17.1"><primary sortas="vte_terminal_set_cursor_blink_mode">vte_terminal_set_cursor_blink_mode</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_cursor_blink_mode  (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="VteTerminalCursorBlinkMode">VteTerminalCursorBlinkMode</link> mode);</programlisting>
<para>
Sets whether or not the cursor will blink. Using <link linkend="VTE-CURSOR-BLINK-SYSTEM--CAPS"><literal>VTE_CURSOR_BLINK_SYSTEM</literal></link>
will use the <link linkend="GtkSettings-gtk-cursor-blink"><type>"gtk-cursor-blink"</type></link> setting.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="VteTerminalCursorBlinkMode"><type>VteTerminalCursorBlinkMode</type></link> to use
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.17.1</para></refsect2>
<refsect2 id="vte-terminal-set-scrollback-lines" role="function">
<title>vte_terminal_set_scrollback_lines ()</title>
<indexterm zone="vte-terminal-set-scrollback-lines"><primary sortas="vte_terminal_set_scrollback_lines">vte_terminal_set_scrollback_lines</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_scrollback_lines   (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="glong">glong</link> lines);</programlisting>
<para>
Sets the length of the scrollback buffer used by the terminal.  The size of
the scrollback buffer will be set to the larger of this value and the number
of visible rows the widget can display, so 0 can safely be used to disable
scrollback.  Note that this setting only affects the normal screen buffer.
For terminal types which have an alternate screen buffer, no scrollback is
allowed on the alternate screen buffer.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>lines</parameter>&#160;:</term>
<listitem><simpara> the length of the history buffer
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-font" role="function">
<title>vte_terminal_set_font ()</title>
<indexterm zone="vte-terminal-set-font"><primary sortas="vte_terminal_set_font">vte_terminal_set_font</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_font               (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="PangoFontDescription">PangoFontDescription</link> *font_desc);</programlisting>
<para>
Sets the font used for rendering all text displayed by the terminal,
overriding any fonts set using <link linkend="gtk-widget-modify-font"><function>gtk_widget_modify_font()</function></link>.  The terminal
will immediately attempt to load the desired font, retrieve its
metrics, and attempt to resize itself to keep the same number of rows
and columns.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>font_desc</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="PangoFontDescription"><type>PangoFontDescription</type></link> of the desired font.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-font-from-string" role="function">
<title>vte_terminal_set_font_from_string ()</title>
<indexterm zone="vte-terminal-set-font-from-string"><primary sortas="vte_terminal_set_font_from_string">vte_terminal_set_font_from_string</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_font_from_string   (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *name);</programlisting>
<para>
A convenience function which converts <parameter>name</parameter> into a <link linkend="PangoFontDescription"><type>PangoFontDescription</type></link> and
passes it to <link linkend="vte-terminal-set-font"><function>vte_terminal_set_font()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> A string describing the font.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-font-from-string-full" role="function" condition="deprecated:0.19.1|since:0.11.11">
<title>vte_terminal_set_font_from_string_full ()</title>
<indexterm zone="vte-terminal-set-font-from-string-full" role="deprecated"><primary sortas="vte_terminal_set_font_from_string_full">vte_terminal_set_font_from_string_full</primary></indexterm><indexterm zone="vte-terminal-set-font-from-string-full" role="0.11.11"><primary sortas="vte_terminal_set_font_from_string_full">vte_terminal_set_font_from_string_full</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_font_from_string_full
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *name,
                                                         <link linkend="VteTerminalAntiAlias">VteTerminalAntiAlias</link> antialias);</programlisting>
<warning><para><literal>vte_terminal_set_font_from_string_full</literal> is deprecated and should not be used in newly-written code. 0.19.1</para></warning>
<para>
A convenience function which converts <parameter>name</parameter> into a <link linkend="PangoFontDescription"><type>PangoFontDescription</type></link> and
passes it to <link linkend="vte-terminal-set-font-full"><function>vte_terminal_set_font_full()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> A string describing the font.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>antialias</parameter>&#160;:</term>
<listitem><simpara> Whether or not to antialias the font (if possible).
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.11.11</para></refsect2>
<refsect2 id="vte-terminal-set-font-full" role="function" condition="deprecated:0.19.1|since:0.11.11">
<title>vte_terminal_set_font_full ()</title>
<indexterm zone="vte-terminal-set-font-full" role="deprecated"><primary sortas="vte_terminal_set_font_full">vte_terminal_set_font_full</primary></indexterm><indexterm zone="vte-terminal-set-font-full" role="0.11.11"><primary sortas="vte_terminal_set_font_full">vte_terminal_set_font_full</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_font_full          (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="PangoFontDescription">PangoFontDescription</link> *font_desc,
                                                         <link linkend="VteTerminalAntiAlias">VteTerminalAntiAlias</link> antialias);</programlisting>
<warning><para><literal>vte_terminal_set_font_full</literal> is deprecated and should not be used in newly-written code. 0.19.1</para></warning>
<para>
Sets the font used for rendering all text displayed by the terminal,
overriding any fonts set using <link linkend="gtk-widget-modify-font"><function>gtk_widget_modify_font()</function></link>.  The terminal
will immediately attempt to load the desired font, retrieve its
metrics, and attempt to resize itself to keep the same number of rows
and columns.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>font_desc</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="PangoFontDescription"><type>PangoFontDescription</type></link> of the desired font.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>antialias</parameter>&#160;:</term>
<listitem><simpara> Specify if anti aliasing of the fonts is to be used or not.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.11.11</para></refsect2>
<refsect2 id="vte-terminal-get-font" role="function">
<title>vte_terminal_get_font ()</title>
<indexterm zone="vte-terminal-get-font"><primary sortas="vte_terminal_get_font">vte_terminal_get_font</primary></indexterm><programlisting>const <link linkend="PangoFontDescription">PangoFontDescription</link> * vte_terminal_get_font      (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Queries the terminal for information about the fonts which will be
used to draw text in the terminal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="PangoFontDescription"><type>PangoFontDescription</type></link> describing the font the terminal is
currently using to render text.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-using-xft" role="function" condition="deprecated:0.19.1">
<title>vte_terminal_get_using_xft ()</title>
<indexterm zone="vte-terminal-get-using-xft" role="deprecated"><primary sortas="vte_terminal_get_using_xft">vte_terminal_get_using_xft</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            vte_terminal_get_using_xft          (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<warning><para><literal>vte_terminal_get_using_xft</literal> is deprecated and should not be used in newly-written code. 0.19.1</para></warning>
<para>
A <link linkend="VteTerminal"><type>VteTerminal</type></link> can use multiple methods to draw text.  This function
allows an application to determine whether or not the current method uses
fontconfig to find fonts.  This setting cannot be changed by the caller,
but in practice usually matches the behavior of GTK+ itself.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-has-selection" role="function">
<title>vte_terminal_get_has_selection ()</title>
<indexterm zone="vte-terminal-get-has-selection"><primary sortas="vte_terminal_get_has_selection">vte_terminal_get_has_selection</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            vte_terminal_get_has_selection      (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Checks if the terminal currently contains selected text.  Note that this
is different from determining if the terminal is the owner of any
<link linkend="GtkClipboard"><type>GtkClipboard</type></link> items.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if part of the text in the terminal is selected.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-word-chars" role="function">
<title>vte_terminal_set_word_chars ()</title>
<indexterm zone="vte-terminal-set-word-chars"><primary sortas="vte_terminal_set_word_chars">vte_terminal_set_word_chars</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_word_chars         (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *spec);</programlisting>
<para>
When the user double-clicks to start selection, the terminal will extend
the selection on word boundaries.  It will treat characters included in <parameter>spec</parameter>
as parts of words, and all other characters as word separators.  Ranges of
characters can be specified by separating them with a hyphen.
</para>
<para>
As a special case, if <parameter>spec</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link> or the empty string, the terminal will
treat all graphic non-punctuation non-space characters as word characters.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>spec</parameter>&#160;:</term>
<listitem><simpara> a specification
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-is-word-char" role="function">
<title>vte_terminal_is_word_char ()</title>
<indexterm zone="vte-terminal-is-word-char"><primary sortas="vte_terminal_is_word_char">vte_terminal_is_word_char</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            vte_terminal_is_word_char           (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gunichar">gunichar</link> c);</programlisting>
<para>
Checks if a particular character is considered to be part of a word or not,
based on the values last passed to <link linkend="vte-terminal-set-word-chars"><function>vte_terminal_set_word_chars()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>c</parameter>&#160;:</term>
<listitem><simpara> a candidate Unicode code point
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the character is considered to be part of a word
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-backspace-binding" role="function">
<title>vte_terminal_set_backspace_binding ()</title>
<indexterm zone="vte-terminal-set-backspace-binding"><primary sortas="vte_terminal_set_backspace_binding">vte_terminal_set_backspace_binding</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_backspace_binding  (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="VteTerminalEraseBinding">VteTerminalEraseBinding</link> binding);</programlisting>
<para>
Modifies the terminal's backspace key binding, which controls what
string or control sequence the terminal sends to its child when the user
presses the backspace key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>binding</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminalEraseBinding"><type>VteTerminalEraseBinding</type></link> for the backspace key
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-delete-binding" role="function">
<title>vte_terminal_set_delete_binding ()</title>
<indexterm zone="vte-terminal-set-delete-binding"><primary sortas="vte_terminal_set_delete_binding">vte_terminal_set_delete_binding</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_delete_binding     (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="VteTerminalEraseBinding">VteTerminalEraseBinding</link> binding);</programlisting>
<para>
Modifies the terminal's delete key binding, which controls what
string or control sequence the terminal sends to its child when the user
presses the delete key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>binding</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminalEraseBinding"><type>VteTerminalEraseBinding</type></link> for the delete key
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-set-mouse-autohide" role="function">
<title>vte_terminal_set_mouse_autohide ()</title>
<indexterm zone="vte-terminal-set-mouse-autohide"><primary sortas="vte_terminal_set_mouse_autohide">vte_terminal_set_mouse_autohide</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_mouse_autohide     (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> setting);</programlisting>
<para>
Changes the value of the terminal's mouse autohide setting.  When autohiding
is enabled, the mouse cursor will be hidden when the user presses a key and
shown when the user moves the mouse.  This setting can be read using
<link linkend="vte-terminal-get-mouse-autohide"><function>vte_terminal_get_mouse_autohide()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>setting</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the autohide should be enabled
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-mouse-autohide" role="function">
<title>vte_terminal_get_mouse_autohide ()</title>
<indexterm zone="vte-terminal-get-mouse-autohide"><primary sortas="vte_terminal_get_mouse_autohide">vte_terminal_get_mouse_autohide</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            vte_terminal_get_mouse_autohide     (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Determines the value of the terminal's mouse autohide setting.  When
autohiding is enabled, the mouse cursor will be hidden when the user presses
a key and shown when the user moves the mouse.  This setting can be changed
using <link linkend="vte-terminal-set-mouse-autohide"><function>vte_terminal_set_mouse_autohide()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if autohiding is enabled, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-reset" role="function">
<title>vte_terminal_reset ()</title>
<indexterm zone="vte-terminal-reset"><primary sortas="vte_terminal_reset">vte_terminal_reset</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_reset                  (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="gboolean">gboolean</link> full,
                                                         <link linkend="gboolean">gboolean</link> clear_history);</programlisting>
<para>
Resets as much of the terminal's internal state as possible, discarding any
unprocessed input data, resetting character attributes, cursor state,
national character set state, status line, terminal modes (insert/delete),
selection state, and encoding.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>full</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to reset tabstops
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>clear_history</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to empty the terminal's scrollback buffer
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-text" role="function">
<title>vte_terminal_get_text ()</title>
<indexterm zone="vte-terminal-get-text"><primary sortas="vte_terminal_get_text">vte_terminal_get_text</primary></indexterm><programlisting><link linkend="char">char</link> *              vte_terminal_get_text               (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="VteSelectionFunc">VteSelectionFunc</link> is_selected,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="GArray">GArray</link> *attributes);</programlisting>
<para>
Extracts a view of the visible part of the terminal.  If <parameter>is_selected</parameter> is not
<link linkend="NULL--CAPS"><literal>NULL</literal></link>, characters will only be read if <parameter>is_selected</parameter> returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> after being
passed the column and row, respectively.  A <link linkend="VteCharAttributes"><type>VteCharAttributes</type></link> structure
is added to <parameter>attributes</parameter> for each byte added to the returned string detailing
the character's position, colors, and other characteristics.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>is_selected</parameter>&#160;:</term>
<listitem><simpara> a callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> user data to be passed to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attributes</parameter>&#160;:</term>
<listitem><simpara> location for storing text attributes
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a text string which must be freed by the caller, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-text-include-trailing-spaces" role="function" condition="since:0.11.11">
<title>vte_terminal_get_text_include_trailing_spaces ()</title>
<indexterm zone="vte-terminal-get-text-include-trailing-spaces" role="0.11.11"><primary sortas="vte_terminal_get_text_include_trailing_spaces">vte_terminal_get_text_include_trailing_spaces</primary></indexterm><programlisting><link linkend="char">char</link> *              vte_terminal_get_text_include_trailing_spaces
                                                        (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="VteSelectionFunc">VteSelectionFunc</link> is_selected,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="GArray">GArray</link> *attributes);</programlisting>
<para>
Extracts a view of the visible part of the terminal.  If <parameter>is_selected</parameter> is not
<link linkend="NULL--CAPS"><literal>NULL</literal></link>, characters will only be read if <parameter>is_selected</parameter> returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> after being
passed the column and row, respectively.  A <link linkend="VteCharAttributes"><type>VteCharAttributes</type></link> structure
is added to <parameter>attributes</parameter> for each byte added to the returned string detailing
the character's position, colors, and other characteristics. This function
differs from <link linkend="vte-terminal-get-text"><function>vte_terminal_get_text()</function></link> in that trailing spaces at the end of
lines are included.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>is_selected</parameter>&#160;:</term>
<listitem><simpara> a callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> user data to be passed to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attributes</parameter>&#160;:</term>
<listitem><simpara> location for storing text attributes
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a text string which must be freed by the caller, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.11.11</para></refsect2>
<refsect2 id="vte-terminal-get-text-range" role="function">
<title>vte_terminal_get_text_range ()</title>
<indexterm zone="vte-terminal-get-text-range"><primary sortas="vte_terminal_get_text_range">vte_terminal_get_text_range</primary></indexterm><programlisting><link linkend="char">char</link> *              vte_terminal_get_text_range         (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="glong">glong</link> start_row,
                                                         <link linkend="glong">glong</link> start_col,
                                                         <link linkend="glong">glong</link> end_row,
                                                         <link linkend="glong">glong</link> end_col,
                                                         <link linkend="VteSelectionFunc">VteSelectionFunc</link> is_selected,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="GArray">GArray</link> *attributes);</programlisting>
<para>
Extracts a view of the visible part of the terminal.  If <parameter>is_selected</parameter> is not
<link linkend="NULL--CAPS"><literal>NULL</literal></link>, characters will only be read if <parameter>is_selected</parameter> returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> after being
passed the column and row, respectively.  A <link linkend="VteCharAttributes"><type>VteCharAttributes</type></link> structure
is added to <parameter>attributes</parameter> for each byte added to the returned string detailing
the character's position, colors, and other characteristics.  The
entire scrollback buffer is scanned, so it is possible to read the entire
contents of the buffer using this function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start_row</parameter>&#160;:</term>
<listitem><simpara> first row to search for data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start_col</parameter>&#160;:</term>
<listitem><simpara> first column to search for data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end_row</parameter>&#160;:</term>
<listitem><simpara> last row to search for data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end_col</parameter>&#160;:</term>
<listitem><simpara> last column to search for data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>is_selected</parameter>&#160;:</term>
<listitem><simpara> a callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> user data to be passed to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attributes</parameter>&#160;:</term>
<listitem><simpara> location for storing text attributes
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a text string which must be freed by the caller, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="VteSelectionFunc" role="function">
<title>VteSelectionFunc ()</title>
<indexterm zone="VteSelectionFunc"><primary sortas="VteSelectionFunc">VteSelectionFunc</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*VteSelectionFunc)                 (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="glong">glong</link> column,
                                                         <link linkend="glong">glong</link> row,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Specifies the type of a selection function used to check whether
a cell has to be selected or not.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> terminal in which the cell is.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>column</parameter>&#160;:</term>
<listitem><simpara> column in which the cell is.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>row</parameter>&#160;:</term>
<listitem><simpara> row in which the cell is.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> user data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if cell has to be selected; <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-cursor-position" role="function">
<title>vte_terminal_get_cursor_position ()</title>
<indexterm zone="vte-terminal-get-cursor-position"><primary sortas="vte_terminal_get_cursor_position">vte_terminal_get_cursor_position</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_get_cursor_position    (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="glong">glong</link> *column,
                                                         <link linkend="glong">glong</link> *row);</programlisting>
<para>
Reads the location of the insertion cursor and returns it.  The row
coordinate is absolute.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>column</parameter>&#160;:</term>
<listitem><simpara> long which will hold the column
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>row</parameter>&#160;:</term>
<listitem><simpara> long which will hold the row
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-match-clear-all" role="function">
<title>vte_terminal_match_clear_all ()</title>
<indexterm zone="vte-terminal-match-clear-all"><primary sortas="vte_terminal_match_clear_all">vte_terminal_match_clear_all</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_match_clear_all        (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Clears the list of regular expressions the terminal uses to highlight text
when the user moves the mouse cursor.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-match-add" role="function" condition="deprecated:">
<title>vte_terminal_match_add ()</title>
<indexterm zone="vte-terminal-match-add" role="deprecated"><primary sortas="vte_terminal_match_add">vte_terminal_match_add</primary></indexterm><programlisting><link linkend="int">int</link>                 vte_terminal_match_add              (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *match);</programlisting>
<warning><para><literal>vte_terminal_match_add</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Adds a regular expression to the list of matching expressions.  When the
user moves the mouse cursor over a section of displayed text which matches
this expression, the text will be highlighted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>match</parameter>&#160;:</term>
<listitem><simpara> a regular expression
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an integer associated with this expression

<parameter>Deprecated</parameter>: 0.17.1
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-match-add-gregex" role="function" condition="since:0.17.1">
<title>vte_terminal_match_add_gregex ()</title>
<indexterm zone="vte-terminal-match-add-gregex" role="0.17.1"><primary sortas="vte_terminal_match_add_gregex">vte_terminal_match_add_gregex</primary></indexterm><programlisting><link linkend="int">int</link>                 vte_terminal_match_add_gregex       (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="GRegex">GRegex</link> *regex,
                                                         <link linkend="GRegexMatchFlags">GRegexMatchFlags</link> flags);</programlisting>
<para>
Adds the regular expression <parameter>regex</parameter> to the list of matching expressions.  When the
user moves the mouse cursor over a section of displayed text which matches
this expression, the text will be highlighted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>regex</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GRegex"><type>GRegex</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GRegexMatchFlags"><type>GRegexMatchFlags</type></link> to use when matching the regex
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an integer associated with this expression

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.17.1</para></refsect2>
<refsect2 id="vte-terminal-match-remove" role="function">
<title>vte_terminal_match_remove ()</title>
<indexterm zone="vte-terminal-match-remove"><primary sortas="vte_terminal_match_remove">vte_terminal_match_remove</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_match_remove           (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="int">int</link> tag);</programlisting>
<para>
Removes the regular expression which is associated with the given <parameter>tag</parameter> from
the list of expressions which the terminal will highlight when the user
moves the mouse cursor over matching text.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tag</parameter>&#160;:</term>
<listitem><simpara> the tag of the regex to remove
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-match-check" role="function">
<title>vte_terminal_match_check ()</title>
<indexterm zone="vte-terminal-match-check"><primary sortas="vte_terminal_match_check">vte_terminal_match_check</primary></indexterm><programlisting><link linkend="char">char</link> *              vte_terminal_match_check            (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="glong">glong</link> column,
                                                         <link linkend="glong">glong</link> row,
                                                         <link linkend="int">int</link> *tag);</programlisting>
<para>
Checks if the text in and around the specified position matches any of the
regular expressions previously set using <link linkend="vte-terminal-match-add"><function>vte_terminal_match_add()</function></link>.  If a
match exists, the text string is returned and if <parameter>tag</parameter> is not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, the number
associated with the matched regular expression will be stored in <parameter>tag</parameter>.
</para>
<para>
If more than one regular expression has been set with
<link linkend="vte-terminal-match-add"><function>vte_terminal_match_add()</function></link>, then expressions are checked in the order in
which they were added.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>column</parameter>&#160;:</term>
<listitem><simpara> the text column
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>row</parameter>&#160;:</term>
<listitem><simpara> the text row
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tag</parameter>&#160;:</term>
<listitem><simpara> pointer to an integer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string which matches one of the previously set regular
expressions, and which must be freed by the caller.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-match-set-cursor" role="function" condition="since:0.11">
<title>vte_terminal_match_set_cursor ()</title>
<indexterm zone="vte-terminal-match-set-cursor" role="0.11"><primary sortas="vte_terminal_match_set_cursor">vte_terminal_match_set_cursor</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_match_set_cursor       (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="int">int</link> tag,
                                                         <link linkend="GdkCursor">GdkCursor</link> *cursor);</programlisting>
<para>
Sets which cursor the terminal will use if the pointer is over the pattern
specified by <parameter>tag</parameter>.  The terminal keeps a reference to <parameter>cursor</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tag</parameter>&#160;:</term>
<listitem><simpara> the tag of the regex which should use the specified cursor
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cursor</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkCursor"><type>GdkCursor</type></link> which the terminal should use when the pattern is
highlighted
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.11</para></refsect2>
<refsect2 id="vte-terminal-match-set-cursor-type" role="function" condition="since:0.11.9">
<title>vte_terminal_match_set_cursor_type ()</title>
<indexterm zone="vte-terminal-match-set-cursor-type" role="0.11.9"><primary sortas="vte_terminal_match_set_cursor_type">vte_terminal_match_set_cursor_type</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_match_set_cursor_type  (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="int">int</link> tag,
                                                         <link linkend="GdkCursorType">GdkCursorType</link> cursor_type);</programlisting>
<para>
Sets which cursor the terminal will use if the pointer is over the pattern
specified by <parameter>tag</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tag</parameter>&#160;:</term>
<listitem><simpara> the tag of the regex which should use the specified cursor
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cursor_type</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdkCursorType"><type>GdkCursorType</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.11.9</para></refsect2>
<refsect2 id="vte-terminal-match-set-cursor-name" role="function" condition="since:0.17.1">
<title>vte_terminal_match_set_cursor_name ()</title>
<indexterm zone="vte-terminal-match-set-cursor-name" role="0.17.1"><primary sortas="vte_terminal_match_set_cursor_name">vte_terminal_match_set_cursor_name</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_match_set_cursor_name  (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="int">int</link> tag,
                                                         const <link linkend="char">char</link> *cursor_name);</programlisting>
<para>
Sets which cursor the terminal will use if the pointer is over the pattern
specified by <parameter>tag</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tag</parameter>&#160;:</term>
<listitem><simpara> the tag of the regex which should use the specified cursor
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cursor_name</parameter>&#160;:</term>
<listitem><simpara> the name of the cursor
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.17.1</para></refsect2>
<refsect2 id="vte-terminal-set-emulation" role="function">
<title>vte_terminal_set_emulation ()</title>
<indexterm zone="vte-terminal-set-emulation"><primary sortas="vte_terminal_set_emulation">vte_terminal_set_emulation</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_emulation          (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *emulation);</programlisting>
<para>
Sets what type of terminal the widget attempts to emulate by scanning for
control sequences defined in the system's termcap file.  Unless you
are interested in this feature, always use "xterm".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>emulation</parameter>&#160;:</term>
<listitem><simpara> the name of a terminal description
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-emulation" role="function">
<title>vte_terminal_get_emulation ()</title>
<indexterm zone="vte-terminal-get-emulation"><primary sortas="vte_terminal_get_emulation">vte_terminal_get_emulation</primary></indexterm><programlisting>const <link linkend="char">char</link> *        vte_terminal_get_emulation          (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Queries the terminal for its current emulation, as last set by a call to
<link linkend="vte-terminal-set-emulation"><function>vte_terminal_set_emulation()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the name of the terminal type the widget is attempting to emulate
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-default-emulation" role="function" condition="since:0.11.11">
<title>vte_terminal_get_default_emulation ()</title>
<indexterm zone="vte-terminal-get-default-emulation" role="0.11.11"><primary sortas="vte_terminal_get_default_emulation">vte_terminal_get_default_emulation</primary></indexterm><programlisting>const <link linkend="char">char</link> *        vte_terminal_get_default_emulation  (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Queries the terminal for its default emulation, which is attempted if the
terminal type passed to <link linkend="vte-terminal-set-emulation"><function>vte_terminal_set_emulation()</function></link> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the name of the default terminal type the widget attempts to emulate

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.11.11</para></refsect2>
<refsect2 id="vte-terminal-set-encoding" role="function">
<title>vte_terminal_set_encoding ()</title>
<indexterm zone="vte-terminal-set-encoding"><primary sortas="vte_terminal_set_encoding">vte_terminal_set_encoding</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_set_encoding           (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         const <link linkend="char">char</link> *codeset);</programlisting>
<para>
Changes the encoding the terminal will expect data from the child to
be encoded with.  For certain terminal types, applications executing in the
terminal can change the encoding.  The default encoding is defined by the
application's locale settings.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>codeset</parameter>&#160;:</term>
<listitem><simpara> a valid <link linkend="g-iconv"><type>g_iconv</type></link> target
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-encoding" role="function">
<title>vte_terminal_get_encoding ()</title>
<indexterm zone="vte-terminal-get-encoding"><primary sortas="vte_terminal_get_encoding">vte_terminal_get_encoding</primary></indexterm><programlisting>const <link linkend="char">char</link> *        vte_terminal_get_encoding           (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Determines the name of the encoding in which the terminal expects data to be
encoded.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the current encoding for the terminal.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-status-line" role="function">
<title>vte_terminal_get_status_line ()</title>
<indexterm zone="vte-terminal-get-status-line"><primary sortas="vte_terminal_get_status_line">vte_terminal_get_status_line</primary></indexterm><programlisting>const <link linkend="char">char</link> *        vte_terminal_get_status_line        (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
Some terminal emulations specify a status line which is separate from the
main display area, and define a means for applications to move the cursor
to the status line and back.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the current contents of the terminal's status line.  For terminals
like "xterm", this will usually be the empty string.  The string must not
be modified or freed by the caller.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-padding" role="function">
<title>vte_terminal_get_padding ()</title>
<indexterm zone="vte-terminal-get-padding"><primary sortas="vte_terminal_get_padding">vte_terminal_get_padding</primary></indexterm><programlisting><link linkend="void">void</link>                vte_terminal_get_padding            (<link linkend="VteTerminal">VteTerminal</link> *terminal,
                                                         <link linkend="int">int</link> *xpad,
                                                         <link linkend="int">int</link> *ypad);</programlisting>
<para>
Determines the amount of additional space the widget is using to pad the
edges of its visible area.  This is necessary for cases where characters in
the selected font don't themselves include a padding area and the text
itself would otherwise be contiguous with the window border.  Applications
which use the widget's <link linkend="row-count"><literal>row_count</literal></link>, <link linkend="column-count"><literal>column_count</literal></link>, <link linkend="char-height"><literal>char_height</literal></link>, and
<link linkend="char-width"><literal>char_width</literal></link> fields to set geometry hints using
<link linkend="gtk-window-set-geometry-hints"><function>gtk_window_set_geometry_hints()</function></link> will need to add this value to the base
size.  The values returned in <parameter>xpad</parameter> and <parameter>ypad</parameter> are the total padding used in
each direction, and do not need to be doubled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>xpad</parameter>&#160;:</term>
<listitem><simpara> address in which to store left/right-edge padding
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ypad</parameter>&#160;:</term>
<listitem><simpara> address in which to store top/bottom-edge ypadding
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-adjustment" role="function">
<title>vte_terminal_get_adjustment ()</title>
<indexterm zone="vte-terminal-get-adjustment"><primary sortas="vte_terminal_get_adjustment">vte_terminal_get_adjustment</primary></indexterm><programlisting><link linkend="GtkAdjustment">GtkAdjustment</link> *     vte_terminal_get_adjustment         (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
An accessor function provided for the benefit of language bindings.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the contents of <parameter>terminal</parameter>'s adjustment field
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-char-ascent" role="function" condition="deprecated:0.19.1">
<title>vte_terminal_get_char_ascent ()</title>
<indexterm zone="vte-terminal-get-char-ascent" role="deprecated"><primary sortas="vte_terminal_get_char_ascent">vte_terminal_get_char_ascent</primary></indexterm><programlisting><link linkend="glong">glong</link>               vte_terminal_get_char_ascent        (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<warning><para><literal>vte_terminal_get_char_ascent</literal> is deprecated and should not be used in newly-written code. 0.19.1</para></warning>
<para>
An accessor function provided for the benefit of language bindings.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the contents of <parameter>terminal</parameter>'s char_ascent field

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-char-descent" role="function" condition="deprecated:0.19.1">
<title>vte_terminal_get_char_descent ()</title>
<indexterm zone="vte-terminal-get-char-descent" role="deprecated"><primary sortas="vte_terminal_get_char_descent">vte_terminal_get_char_descent</primary></indexterm><programlisting><link linkend="glong">glong</link>               vte_terminal_get_char_descent       (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<warning><para><literal>vte_terminal_get_char_descent</literal> is deprecated and should not be used in newly-written code. 0.19.1</para></warning>
<para>
An accessor function provided for the benefit of language bindings.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the contents of <parameter>terminal</parameter>'s char_descent field

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-char-height" role="function">
<title>vte_terminal_get_char_height ()</title>
<indexterm zone="vte-terminal-get-char-height"><primary sortas="vte_terminal_get_char_height">vte_terminal_get_char_height</primary></indexterm><programlisting><link linkend="glong">glong</link>               vte_terminal_get_char_height        (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
An accessor function provided for the benefit of language bindings.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the contents of <parameter>terminal</parameter>'s char_height field
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-char-width" role="function">
<title>vte_terminal_get_char_width ()</title>
<indexterm zone="vte-terminal-get-char-width"><primary sortas="vte_terminal_get_char_width">vte_terminal_get_char_width</primary></indexterm><programlisting><link linkend="glong">glong</link>               vte_terminal_get_char_width         (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
An accessor function provided for the benefit of language bindings.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the contents of <parameter>terminal</parameter>'s char_width field
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-column-count" role="function">
<title>vte_terminal_get_column_count ()</title>
<indexterm zone="vte-terminal-get-column-count"><primary sortas="vte_terminal_get_column_count">vte_terminal_get_column_count</primary></indexterm><programlisting><link linkend="glong">glong</link>               vte_terminal_get_column_count       (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
An accessor function provided for the benefit of language bindings.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the contents of <parameter>terminal</parameter>'s column_count field
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-icon-title" role="function">
<title>vte_terminal_get_icon_title ()</title>
<indexterm zone="vte-terminal-get-icon-title"><primary sortas="vte_terminal_get_icon_title">vte_terminal_get_icon_title</primary></indexterm><programlisting>const <link linkend="char">char</link> *        vte_terminal_get_icon_title         (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
An accessor function provided for the benefit of language bindings.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the contents of <parameter>terminal</parameter>'s icon_title field
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-row-count" role="function">
<title>vte_terminal_get_row_count ()</title>
<indexterm zone="vte-terminal-get-row-count"><primary sortas="vte_terminal_get_row_count">vte_terminal_get_row_count</primary></indexterm><programlisting><link linkend="glong">glong</link>               vte_terminal_get_row_count          (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
An accessor function provided for the benefit of language bindings.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the contents of <parameter>terminal</parameter>'s row_count field
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="vte-terminal-get-window-title" role="function">
<title>vte_terminal_get_window_title ()</title>
<indexterm zone="vte-terminal-get-window-title"><primary sortas="vte_terminal_get_window_title">vte_terminal_get_window_title</primary></indexterm><programlisting>const <link linkend="char">char</link> *        vte_terminal_get_window_title       (<link linkend="VteTerminal">VteTerminal</link> *terminal);</programlisting>
<para>
An accessor function provided for the benefit of language bindings.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>terminal</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="VteTerminal"><type>VteTerminal</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the contents of <parameter>terminal</parameter>'s window_title field
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="VteTerminal.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="VteTerminal--allow-bold" role="property"><title>The <literal>&quot;allow-bold&quot;</literal> property</title>
<indexterm zone="VteTerminal--allow-bold" role="0.19.1"><primary sortas="VteTerminal:allow-bold">VteTerminal:allow-bold</primary></indexterm><programlisting>  &quot;allow-bold&quot;               <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
Controls whether or not the terminal will attempt to draw bold text.
This may happen either by using a bold font variant, or by
repainting text with a different offset.</para>
<para>
</para><para>Default value: TRUE</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--audible-bell" role="property"><title>The <literal>&quot;audible-bell&quot;</literal> property</title>
<indexterm zone="VteTerminal--audible-bell" role="0.19.1"><primary sortas="VteTerminal:audible-bell">VteTerminal:audible-bell</primary></indexterm><programlisting>  &quot;audible-bell&quot;             <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
Controls whether or not the terminal will beep when the child outputs the
"bl" sequence.</para>
<para>
</para><para>Default value: TRUE</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--background-image-file" role="property"><title>The <literal>&quot;background-image-file&quot;</literal> property</title>
<indexterm zone="VteTerminal--background-image-file" role="0.19.1"><primary sortas="VteTerminal:background-image-file">VteTerminal:background-image-file</primary></indexterm><programlisting>  &quot;background-image-file&quot;    <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>
Sets a background image file for the widget.  If specified by
<link linkend="VteTerminal--background-saturation--"><type>"background-saturation:"</type></link>, the terminal will tint its
in-memory copy of the image before applying it to the terminal.</para>
<para>
</para><para>Default value: NULL</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--background-image-pixbuf" role="property"><title>The <literal>&quot;background-image-pixbuf&quot;</literal> property</title>
<indexterm zone="VteTerminal--background-image-pixbuf" role="0.19.1"><primary sortas="VteTerminal:background-image-pixbuf">VteTerminal:background-image-pixbuf</primary></indexterm><programlisting>  &quot;background-image-pixbuf&quot;  <link linkend="GdkPixbuf">GdkPixbuf</link>*            : Read / Write</programlisting>
<para>
Sets a background image for the widget.  Text which would otherwise be
drawn using the default background color will instead be drawn over the
specified image.  If necessary, the image will be tiled to cover the
widget's entire visible area. If specified by
<link linkend="VteTerminal--background-saturation--"><type>"background-saturation:"</type></link>, the terminal will tint its
in-memory copy of the image before applying it to the terminal.</para>
<para>
</para><para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--background-opacity" role="property"><title>The <literal>&quot;background-opacity&quot;</literal> property</title>
<indexterm zone="VteTerminal--background-opacity" role="0.19.1"><primary sortas="VteTerminal:background-opacity">VteTerminal:background-opacity</primary></indexterm><programlisting>  &quot;background-opacity&quot;       <link linkend="gdouble">gdouble</link>               : Read / Write</programlisting>
<para>
Sets the opacity of the terminal background, were 0.0 means completely
transparent and 1.0 means completely opaque.</para>
<para>
</para><para>Allowed values: [0,1]</para>
<para>Default value: 1</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--background-saturation" role="property"><title>The <literal>&quot;background-saturation&quot;</literal> property</title>
<indexterm zone="VteTerminal--background-saturation" role="0.19.1"><primary sortas="VteTerminal:background-saturation">VteTerminal:background-saturation</primary></indexterm><programlisting>  &quot;background-saturation&quot;    <link linkend="gdouble">gdouble</link>               : Read / Write</programlisting>
<para>
If a background image has been set using <link linkend="VteTerminal--background-image-file--"><type>"background-image-file:"</type></link> or
<link linkend="VteTermina--background-image-pixbuf--"><type>"background-image-pixbuf:"</type></link>, or <link linkend="VteTerminal--background-transparent--"><type>"background-transparent:"</type></link>,
and the saturation value is less
than 1.0, the terminal will adjust the colors of the image before drawing
the image.  To do so, the terminal will create a copy of the background
image (or snapshot of the root window) and modify its pixel values.</para>
<para>
</para><para>Allowed values: [0,1]</para>
<para>Default value: 0.4</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--background-tint-color" role="property"><title>The <literal>&quot;background-tint-color&quot;</literal> property</title>
<indexterm zone="VteTerminal--background-tint-color" role="0.19.1"><primary sortas="VteTerminal:background-tint-color">VteTerminal:background-tint-color</primary></indexterm><programlisting>  &quot;background-tint-color&quot;    <link linkend="GdkColor">GdkColor</link>*             : Read / Write</programlisting>
<para>
If a background image has been set using <link linkend="VteTerminal--background-image-file--"><type>"background-image-file:"</type></link> or
<link linkend="VteTermina--background-image-pixbuf--"><type>"background-image-pixbuf:"</type></link>, or <link linkend="VteTerminal--background-transparent--"><type>"background-transparent:"</type></link>, and
and the value set by VteTerminal:background-saturation: is less than 1.0,
the terminal
will adjust the color of the image before drawing the image.  To do so,
the terminal will create a copy of the background image (or snapshot of
the root window) and modify its pixel values.  The initial tint color
is black.</para>
<para>
</para><para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--background-transparent" role="property"><title>The <literal>&quot;background-transparent&quot;</literal> property</title>
<indexterm zone="VteTerminal--background-transparent" role="0.19.1"><primary sortas="VteTerminal:background-transparent">VteTerminal:background-transparent</primary></indexterm><programlisting>  &quot;background-transparent&quot;   <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
Sets whther the terminal uses the pixmap stored in the root
window as the background, adjusted so that if there are no windows
below your application, the widget will appear to be transparent.
</para>
<para>
Note: When using a compositing window manager, you should instead
set a RGBA colourmap on the toplevel window, so you get real transparency.</para>
<para>
</para><para>Default value: FALSE</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--backspace-binding" role="property"><title>The <literal>&quot;backspace-binding&quot;</literal> property</title>
<indexterm zone="VteTerminal--backspace-binding" role="0.19.1"><primary sortas="VteTerminal:backspace-binding">VteTerminal:backspace-binding</primary></indexterm><programlisting>  &quot;backspace-binding&quot;        <link linkend="VteTerminalEraseBinding">VteTerminalEraseBinding</link>  : Read / Write</programlisting>
<para>
*Controls what string or control sequence the terminal sends to its child
when the user presses the backspace key.</para>
<para>
</para><para>Default value: VTE_ERASE_AUTO</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--cursor-blink-mode" role="property"><title>The <literal>&quot;cursor-blink-mode&quot;</literal> property</title>
<indexterm zone="VteTerminal--cursor-blink-mode" role="0.19.1"><primary sortas="VteTerminal:cursor-blink-mode">VteTerminal:cursor-blink-mode</primary></indexterm><programlisting>  &quot;cursor-blink-mode&quot;        <link linkend="VteTerminalCursorBlinkMode">VteTerminalCursorBlinkMode</link>  : Read / Write</programlisting>
<para>
Sets whether or not the cursor will blink. Using <link linkend="VTE-CURSOR-BLINK-SYSTEM--CAPS"><literal>VTE_CURSOR_BLINK_SYSTEM</literal></link>
will use the <link linkend="GtkSettings-gtk-cursor-blink"><type>"gtk-cursor-blink"</type></link> setting.</para>
<para>
</para><para>Default value: VTE_CURSOR_BLINK_SYSTEM</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--cursor-shape" role="property"><title>The <literal>&quot;cursor-shape&quot;</literal> property</title>
<indexterm zone="VteTerminal--cursor-shape" role="0.19.1"><primary sortas="VteTerminal:cursor-shape">VteTerminal:cursor-shape</primary></indexterm><programlisting>  &quot;cursor-shape&quot;             <link linkend="VteTerminalCursorShape">VteTerminalCursorShape</link>  : Read / Write</programlisting>
<para>
Controls the shape of the cursor.</para>
<para>
</para><para>Default value: VTE_CURSOR_SHAPE_BLOCK</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--delete-binding" role="property"><title>The <literal>&quot;delete-binding&quot;</literal> property</title>
<indexterm zone="VteTerminal--delete-binding" role="0.19.1"><primary sortas="VteTerminal:delete-binding">VteTerminal:delete-binding</primary></indexterm><programlisting>  &quot;delete-binding&quot;           <link linkend="VteTerminalEraseBinding">VteTerminalEraseBinding</link>  : Read / Write</programlisting>
<para>
Controls what string or control sequence the terminal sends to its child
when the user presses the delete key.</para>
<para>
</para><para>Default value: VTE_ERASE_AUTO</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--emulation" role="property"><title>The <literal>&quot;emulation&quot;</literal> property</title>
<indexterm zone="VteTerminal--emulation" role="0.19.1"><primary sortas="VteTerminal:emulation">VteTerminal:emulation</primary></indexterm><programlisting>  &quot;emulation&quot;                <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>
Sets what type of terminal the widget attempts to emulate by scanning for
control sequences defined in the system's termcap file.  Unless you
are interested in this feature, always use the default which is "xterm".</para>
<para>
</para><para>Default value: "xterm"</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--encoding" role="property"><title>The <literal>&quot;encoding&quot;</literal> property</title>
<indexterm zone="VteTerminal--encoding" role="0.19.1"><primary sortas="VteTerminal:encoding">VteTerminal:encoding</primary></indexterm><programlisting>  &quot;encoding&quot;                 <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>
Controls the encoding the terminal will expect data from the child to
be encoded with.  For certain terminal types, applications executing in the
terminal can change the encoding.  The default is defined by the
application's locale settings.</para>
<para>
</para><para>Default value: NULL</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--font-desc" role="property"><title>The <literal>&quot;font-desc&quot;</literal> property</title>
<indexterm zone="VteTerminal--font-desc" role="0.19.1"><primary sortas="VteTerminal:font-desc">VteTerminal:font-desc</primary></indexterm><programlisting>  &quot;font-desc&quot;                <link linkend="PangoFontDescription">PangoFontDescription</link>*  : Read / Write</programlisting>
<para>
Specifies the font used for rendering all text displayed by the terminal,
overriding any fonts set using <link linkend="gtk-widget-modify-font"><function>gtk_widget_modify_font()</function></link>.  The terminal
will immediately attempt to load the desired font, retrieve its
metrics, and attempt to resize itself to keep the same number of rows
and columns.</para>
<para>
</para><para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--icon-title" role="property"><title>The <literal>&quot;icon-title&quot;</literal> property</title>
<indexterm zone="VteTerminal--icon-title" role="0.19.1"><primary sortas="VteTerminal:icon-title">VteTerminal:icon-title</primary></indexterm><programlisting>  &quot;icon-title&quot;               <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
The terminal's so-called icon title, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if no icon title has been set.</para>
<para>
</para><para>Default value: NULL</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--pointer-autohide" role="property"><title>The <literal>&quot;pointer-autohide&quot;</literal> property</title>
<indexterm zone="VteTerminal--pointer-autohide" role="0.19.1"><primary sortas="VteTerminal:pointer-autohide">VteTerminal:pointer-autohide</primary></indexterm><programlisting>  &quot;pointer-autohide&quot;         <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
Controls the value of the terminal's mouse autohide setting.  When autohiding
is enabled, the mouse cursor will be hidden when the user presses a key and
shown when the user moves the mouse.</para>
<para>
</para><para>Default value: FALSE</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--pty" role="property"><title>The <literal>&quot;pty&quot;</literal> property</title>
<indexterm zone="VteTerminal--pty" role="0.19.1"><primary sortas="VteTerminal:pty">VteTerminal:pty</primary></indexterm><programlisting>  &quot;pty&quot;                      <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>
The file descriptor of the master end of the terminal's PTY.</para>
<para>
</para><para>Allowed values: &gt;= -1</para>
<para>Default value: -1</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--scroll-background" role="property"><title>The <literal>&quot;scroll-background&quot;</literal> property</title>
<indexterm zone="VteTerminal--scroll-background" role="0.19.1"><primary sortas="VteTerminal:scroll-background">VteTerminal:scroll-background</primary></indexterm><programlisting>  &quot;scroll-background&quot;        <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
Controls whether or not the terminal will scroll the background image (if
one is set) when the text in the window must be scrolled.</para>
<para>
</para><para>Default value: FALSE</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--scroll-on-keystroke" role="property"><title>The <literal>&quot;scroll-on-keystroke&quot;</literal> property</title>
<indexterm zone="VteTerminal--scroll-on-keystroke" role="0.19.1"><primary sortas="VteTerminal:scroll-on-keystroke">VteTerminal:scroll-on-keystroke</primary></indexterm><programlisting>  &quot;scroll-on-keystroke&quot;      <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
Controls whether or not the terminal will forcibly scroll to the bottom of
the viewable history when the user presses a key.  Modifier keys do not
trigger this behavior.</para>
<para>
</para><para>Default value: FALSE</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--scroll-on-output" role="property"><title>The <literal>&quot;scroll-on-output&quot;</literal> property</title>
<indexterm zone="VteTerminal--scroll-on-output" role="0.19.1"><primary sortas="VteTerminal:scroll-on-output">VteTerminal:scroll-on-output</primary></indexterm><programlisting>  &quot;scroll-on-output&quot;         <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
Controls whether or not the terminal will forcibly scroll to the bottom of
the viewable history when the new data is received from the child.</para>
<para>
</para><para>Default value: TRUE</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--scrollback-lines" role="property"><title>The <literal>&quot;scrollback-lines&quot;</literal> property</title>
<indexterm zone="VteTerminal--scrollback-lines" role="0.19.1"><primary sortas="VteTerminal:scrollback-lines">VteTerminal:scrollback-lines</primary></indexterm><programlisting>  &quot;scrollback-lines&quot;         <link linkend="guint">guint</link>                 : Read / Write</programlisting>
<para>
The length of the scrollback buffer used by the terminal.  The size of
the scrollback buffer will be set to the larger of this value and the number
of visible rows the widget can display, so 0 can safely be used to disable
scrollback.  Note that this setting only affects the normal screen buffer.
For terminal types which have an alternate screen buffer, no scrollback is
allowed on the alternate screen buffer.</para>
<para>
</para><para>Default value: 100</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--visible-bell" role="property"><title>The <literal>&quot;visible-bell&quot;</literal> property</title>
<indexterm zone="VteTerminal--visible-bell" role="0.19.1"><primary sortas="VteTerminal:visible-bell">VteTerminal:visible-bell</primary></indexterm><programlisting>  &quot;visible-bell&quot;             <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
Controls whether the terminal will present a visible bell to the
user when the child outputs the "bl" sequence.  The terminal
will clear itself to the default foreground color and then repaint itself.</para>
<para>
</para><para>Default value: FALSE</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--window-title" role="property"><title>The <literal>&quot;window-title&quot;</literal> property</title>
<indexterm zone="VteTerminal--window-title" role="0.19.1"><primary sortas="VteTerminal:window-title">VteTerminal:window-title</primary></indexterm><programlisting>  &quot;window-title&quot;             <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
The terminal's title.</para>
<para>
</para><para>Default value: NULL</para>
<para>Since 0.19.1</para>
</refsect2>
<refsect2 id="VteTerminal--word-chars" role="property"><title>The <literal>&quot;word-chars&quot;</literal> property</title>
<indexterm zone="VteTerminal--word-chars" role="0.19.1"><primary sortas="VteTerminal:word-chars">VteTerminal:word-chars</primary></indexterm><programlisting>  &quot;word-chars&quot;               <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>
When the user double-clicks to start selection, the terminal will extend
the selection on word boundaries.  It will treat characters the word-chars
characters as parts of words, and all other characters as word separators.
Ranges of characters can be specified by separating them with a hyphen.
</para>
<para>
As a special case, when setting this to <link linkend="NULL--CAPS"><literal>NULL</literal></link> or the empty string, the terminal will
treat all graphic non-punctuation non-space characters as word characters.</para>
<para>
</para><para>Default value: NULL</para>
<para>Since 0.19.1</para>
</refsect2>
</refsect1>

<refsect1 id="VteTerminal.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="VteTerminal-beep" role="signal"><title>The <literal>&quot;beep&quot;</literal> signal</title>
<indexterm zone="VteTerminal-beep"><primary sortas="VteTerminal::beep">VteTerminal::beep</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
This signal is emitted when the a child sends a beep request to the
terminal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-char-size-changed" role="signal"><title>The <literal>&quot;char-size-changed&quot;</literal> signal</title>
<indexterm zone="VteTerminal-char-size-changed"><primary sortas="VteTerminal::char-size-changed">VteTerminal::char-size-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="guint">guint</link>        width,
                                                        <link linkend="guint">guint</link>        height,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted whenever selection of a new font causes the values of the
<link linkend="char-width"><literal>char_width</literal></link> or <link linkend="char-height"><literal>char_height</literal></link> fields to change.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&#160;:</term>
<listitem><simpara> the new character cell width.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&#160;:</term>
<listitem><simpara> the new character cell height.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-child-exited" role="signal"><title>The <literal>&quot;child-exited&quot;</literal> signal</title>
<indexterm zone="VteTerminal-child-exited"><primary sortas="VteTerminal::child-exited">VteTerminal::child-exited</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
This signal is emitted when the terminal detects that a child started
using <link linkend="vte-terminal-fork-command"><function>vte_terminal_fork_command()</function></link> has exited.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-commit" role="signal"><title>The <literal>&quot;commit&quot;</literal> signal</title>
<indexterm zone="VteTerminal-commit"><primary sortas="VteTerminal::commit">VteTerminal::commit</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gchar">gchar</link>       *text,
                                                        <link linkend="guint">guint</link>        size,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted whenever the terminal receives input from the user and
prepares to send it to the child process.  The signal is emitted even
when there is no child process.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>text</parameter>&#160;:</term>
<listitem><simpara> a string of text.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> the length of that string of text.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-contents-changed" role="signal"><title>The <literal>&quot;contents-changed&quot;</literal> signal</title>
<indexterm zone="VteTerminal-contents-changed"><primary sortas="VteTerminal::contents-changed">VteTerminal::contents-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted whenever the visible appearance of the terminal has changed.
Used primarily by <link linkend="VteTerminalAccessible"><type>VteTerminalAccessible</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-copy-clipboard" role="signal"><title>The <literal>&quot;copy-clipboard&quot;</literal> signal</title>
<indexterm zone="VteTerminal-copy-clipboard"><primary sortas="VteTerminal::copy-clipboard">VteTerminal::copy-clipboard</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last / Action</programlisting>
<para>
Emitted whenever <link linkend="vte-terminal-copy-clipboard"><function>vte_terminal_copy_clipboard()</function></link> is called.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-cursor-moved" role="signal"><title>The <literal>&quot;cursor-moved&quot;</literal> signal</title>
<indexterm zone="VteTerminal-cursor-moved"><primary sortas="VteTerminal::cursor-moved">VteTerminal::cursor-moved</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted whenever the cursor moves to a new character cell.  Used
primarily by <link linkend="VteTerminalAccessible"><type>VteTerminalAccessible</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-decrease-font-size" role="signal"><title>The <literal>&quot;decrease-font-size&quot;</literal> signal</title>
<indexterm zone="VteTerminal-decrease-font-size"><primary sortas="VteTerminal::decrease-font-size">VteTerminal::decrease-font-size</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted when the user hits the '-' key while holding the Control key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-deiconify-window" role="signal"><title>The <literal>&quot;deiconify-window&quot;</literal> signal</title>
<indexterm zone="VteTerminal-deiconify-window"><primary sortas="VteTerminal::deiconify-window">VteTerminal::deiconify-window</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted at the child application's request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-emulation-changed" role="signal"><title>The <literal>&quot;emulation-changed&quot;</literal> signal</title>
<indexterm zone="VteTerminal-emulation-changed"><primary sortas="VteTerminal::emulation-changed">VteTerminal::emulation-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted whenever the terminal's emulation changes, only possible at
the parent application's request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-encoding-changed" role="signal"><title>The <literal>&quot;encoding-changed&quot;</literal> signal</title>
<indexterm zone="VteTerminal-encoding-changed"><primary sortas="VteTerminal::encoding-changed">VteTerminal::encoding-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted whenever the terminal's current encoding has changed, either
as a result of receiving a control sequence which toggled between the
local and UTF-8 encodings, or at the parent application's request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-eof" role="signal"><title>The <literal>&quot;eof&quot;</literal> signal</title>
<indexterm zone="VteTerminal-eof"><primary sortas="VteTerminal::eof">VteTerminal::eof</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted when the terminal receives an end-of-file from a child which
is running in the terminal.  This signal is frequently (but not
always) emitted with a "child-exited" signal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-icon-title-changed" role="signal"><title>The <literal>&quot;icon-title-changed&quot;</literal> signal</title>
<indexterm zone="VteTerminal-icon-title-changed"><primary sortas="VteTerminal::icon-title-changed">VteTerminal::icon-title-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted when the terminal's <link linkend="icon-title"><literal>icon_title</literal></link> field is modified.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-iconify-window" role="signal"><title>The <literal>&quot;iconify-window&quot;</literal> signal</title>
<indexterm zone="VteTerminal-iconify-window"><primary sortas="VteTerminal::iconify-window">VteTerminal::iconify-window</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted at the child application's request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-increase-font-size" role="signal"><title>The <literal>&quot;increase-font-size&quot;</literal> signal</title>
<indexterm zone="VteTerminal-increase-font-size"><primary sortas="VteTerminal::increase-font-size">VteTerminal::increase-font-size</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted when the user hits the '+' key while holding the Control key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-lower-window" role="signal"><title>The <literal>&quot;lower-window&quot;</literal> signal</title>
<indexterm zone="VteTerminal-lower-window"><primary sortas="VteTerminal::lower-window">VteTerminal::lower-window</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted at the child application's request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-maximize-window" role="signal"><title>The <literal>&quot;maximize-window&quot;</literal> signal</title>
<indexterm zone="VteTerminal-maximize-window"><primary sortas="VteTerminal::maximize-window">VteTerminal::maximize-window</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted at the child application's request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-move-window" role="signal"><title>The <literal>&quot;move-window&quot;</literal> signal</title>
<indexterm zone="VteTerminal-move-window"><primary sortas="VteTerminal::move-window">VteTerminal::move-window</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="guint">guint</link>        arg1,
                                                        <link linkend="guint">guint</link>        arg2,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-paste-clipboard" role="signal"><title>The <literal>&quot;paste-clipboard&quot;</literal> signal</title>
<indexterm zone="VteTerminal-paste-clipboard"><primary sortas="VteTerminal::paste-clipboard">VteTerminal::paste-clipboard</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last / Action</programlisting>
<para>
Emitted whenever <link linkend="vte-terminal-paste-clipboard"><function>vte_terminal_paste_clipboard()</function></link> is called.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-raise-window" role="signal"><title>The <literal>&quot;raise-window&quot;</literal> signal</title>
<indexterm zone="VteTerminal-raise-window"><primary sortas="VteTerminal::raise-window">VteTerminal::raise-window</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted at the child application's request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-refresh-window" role="signal"><title>The <literal>&quot;refresh-window&quot;</literal> signal</title>
<indexterm zone="VteTerminal-refresh-window"><primary sortas="VteTerminal::refresh-window">VteTerminal::refresh-window</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted at the child application's request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-resize-window" role="signal"><title>The <literal>&quot;resize-window&quot;</literal> signal</title>
<indexterm zone="VteTerminal-resize-window"><primary sortas="VteTerminal::resize-window">VteTerminal::resize-window</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="guint">guint</link>        x,
                                                        <link linkend="guint">guint</link>        y,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted at the child application's request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> the terminal's desired location, X coordinate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> the terminal's desired location, Y coordinate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-restore-window" role="signal"><title>The <literal>&quot;restore-window&quot;</literal> signal</title>
<indexterm zone="VteTerminal-restore-window"><primary sortas="VteTerminal::restore-window">VteTerminal::restore-window</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted at the child application's request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-selection-changed" role="signal"><title>The <literal>&quot;selection-changed&quot;</literal> signal</title>
<indexterm zone="VteTerminal-selection-changed"><primary sortas="VteTerminal::selection-changed">VteTerminal::selection-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted whenever the contents of terminal's selection changes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-set-scroll-adjustments" role="signal"><title>The <literal>&quot;set-scroll-adjustments&quot;</literal> signal</title>
<indexterm zone="VteTerminal-set-scroll-adjustments" role="0.17.1"><primary sortas="VteTerminal::set-scroll-adjustments">VteTerminal::set-scroll-adjustments</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link>   *vteterminal,
                                                        <link linkend="GtkAdjustment">GtkAdjustment</link> *horizontal,
                                                        <link linkend="GtkAdjustment">GtkAdjustment</link> *vertical,
                                                        <link linkend="gpointer">gpointer</link>       user_data)        : Run Last</programlisting>
<para>
Set the scroll adjustments for the terminal. Usually scrolled containers
like <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link> will emit this signal to connect two instances
of <link linkend="GtkScrollbar"><type>GtkScrollbar</type></link> to the scroll directions of the <link linkend="VteTerminal"><type>VteTerminal</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>horizontal</parameter>&#160;:</term>
<listitem><simpara> the horizontal <link linkend="GtkAdjustment"><type>GtkAdjustment</type></link> (unused in <link linkend="VteTerminal"><type>VteTerminal</type></link>).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>vertical</parameter>&#160;:</term>
<listitem><simpara> the vertical <link linkend="GtkAdjustment"><type>GtkAdjustment</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since 0.17.1</para></refsect2><refsect2 id="VteTerminal-status-line-changed" role="signal"><title>The <literal>&quot;status-line-changed&quot;</literal> signal</title>
<indexterm zone="VteTerminal-status-line-changed"><primary sortas="VteTerminal::status-line-changed">VteTerminal::status-line-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted whenever the contents of the status line are modified or
cleared.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-text-deleted" role="signal"><title>The <literal>&quot;text-deleted&quot;</literal> signal</title>
<indexterm zone="VteTerminal-text-deleted"><primary sortas="VteTerminal::text-deleted">VteTerminal::text-deleted</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
An internal signal used for communication between the terminal and
its accessibility peer. May not be emitted under certain
circumstances.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-text-inserted" role="signal"><title>The <literal>&quot;text-inserted&quot;</literal> signal</title>
<indexterm zone="VteTerminal-text-inserted"><primary sortas="VteTerminal::text-inserted">VteTerminal::text-inserted</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
An internal signal used for communication between the terminal and
its accessibility peer. May not be emitted under certain
circumstances.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-text-modified" role="signal"><title>The <literal>&quot;text-modified&quot;</literal> signal</title>
<indexterm zone="VteTerminal-text-modified"><primary sortas="VteTerminal::text-modified">VteTerminal::text-modified</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
An internal signal used for communication between the terminal and
its accessibility peer. May not be emitted under certain
circumstances.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-text-scrolled" role="signal"><title>The <literal>&quot;text-scrolled&quot;</literal> signal</title>
<indexterm zone="VteTerminal-text-scrolled"><primary sortas="VteTerminal::text-scrolled">VteTerminal::text-scrolled</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gint">gint</link>         delta,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
An internal signal used for communication between the terminal and
its accessibility peer. May not be emitted under certain
circumstances.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>delta</parameter>&#160;:</term>
<listitem><simpara> the number of lines scrolled.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="VteTerminal-window-title-changed" role="signal"><title>The <literal>&quot;window-title-changed&quot;</literal> signal</title>
<indexterm zone="VteTerminal-window-title-changed"><primary sortas="VteTerminal::window-title-changed">VteTerminal::window-title-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="VteTerminal">VteTerminal</link> *vteterminal,
                                                        <link linkend="gpointer">gpointer</link>     user_data)        : Run Last</programlisting>
<para>
Emitted when the terminal's <link linkend="window-title"><literal>window_title</literal></link> field is modified.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vteterminal</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
