<refentry id="vte-Version-Information">
<refmeta>
<refentrytitle role="top_of_page" id="vte-Version-Information.top_of_page">Version Information</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>VTE Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Version Information</refname>
<refpurpose>Defines and macros to check the VTE version</refpurpose>
</refnamediv>

<refsynopsisdiv id="vte-Version-Information.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#define             <link linkend="VTE-MAJOR-VERSION--CAPS">VTE_MAJOR_VERSION</link>
#define             <link linkend="VTE-MINOR-VERSION--CAPS">VTE_MINOR_VERSION</link>
#define             <link linkend="VTE-MICRO-VERSION--CAPS">VTE_MICRO_VERSION</link>
#define             <link linkend="VTE-CHECK-VERSION--CAPS">VTE_CHECK_VERSION</link>                   (major,minor,micro)
</synopsis>
</refsynopsisdiv>









<refsect1 id="vte-Version-Information.description" role="desc">
<title role="desc.title">Description</title>
<para>
VTE provides version information, primarily useful in configure checks
for builds that have a configure script, and for use in C preprocessor directives.
</para>
</refsect1>

<refsect1 id="vte-Version-Information.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="VTE-MAJOR-VERSION--CAPS" role="macro" condition="since:0.16.15">
<title>VTE_MAJOR_VERSION</title>
<indexterm zone="VTE-MAJOR-VERSION--CAPS" role="0.16.15"><primary sortas="VTE_MAJOR_VERSION">VTE_MAJOR_VERSION</primary></indexterm><programlisting>#define VTE_MAJOR_VERSION (0)
</programlisting>
<para>
The major version number of the VTE library used at compile time.  (e.g. in VTE version
0.16.15 this is 0.)
</para><para role="since">Since 0.16.15</para></refsect2>
<refsect2 id="VTE-MINOR-VERSION--CAPS" role="macro" condition="since:0.16.15">
<title>VTE_MINOR_VERSION</title>
<indexterm zone="VTE-MINOR-VERSION--CAPS" role="0.16.15"><primary sortas="VTE_MINOR_VERSION">VTE_MINOR_VERSION</primary></indexterm><programlisting>#define VTE_MINOR_VERSION (23)
</programlisting>
<para>
The minor version number of the VTE library used at compile time.  (e.g. in VTE version
0.16.15 this is 16.)
</para><para role="since">Since 0.16.15</para></refsect2>
<refsect2 id="VTE-MICRO-VERSION--CAPS" role="macro" condition="since:0.16.15">
<title>VTE_MICRO_VERSION</title>
<indexterm zone="VTE-MICRO-VERSION--CAPS" role="0.16.15"><primary sortas="VTE_MICRO_VERSION">VTE_MICRO_VERSION</primary></indexterm><programlisting>#define VTE_MICRO_VERSION (2)
</programlisting>
<para>
The micro version number of the VTE library used at compile time.  (e.g. in VTE version
0.16.15 this is 15.)
</para><para role="since">Since 0.16.15</para></refsect2>
<refsect2 id="VTE-CHECK-VERSION--CAPS" role="macro" condition="since:0.16.15">
<title>VTE_CHECK_VERSION()</title>
<indexterm zone="VTE-CHECK-VERSION--CAPS" role="0.16.15"><primary sortas="VTE_CHECK_VERSION">VTE_CHECK_VERSION</primary></indexterm><programlisting>#define             VTE_CHECK_VERSION(major,minor,micro)</programlisting>
<para>
Returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the version of the VTE header files is the same
as or newer than the passed-in version.
</para><variablelist role="params">
<varlistentry><term><parameter>major</parameter>&#160;:</term>
<listitem><simpara>major version to check for
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>minor</parameter>&#160;:</term>
<listitem><simpara>minor version to check for
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>micro</parameter>&#160;:</term>
<listitem><simpara>micro version to check for
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.16.15</para></refsect2>

</refsect1>




</refentry>
