<refentry id="VteReaper">
<refmeta>
<refentrytitle role="top_of_page">VteReaper</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>VTE Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>VteReaper</refname>
<refpurpose>A singleton object which catches <link linkend="SIGCHLD:CAPS"><literal>SIGCHLD</literal></link> signals and converts them into
GObject-style &quot;child-exited&quot; signals.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



            <link linkend="VteReaper-struct">VteReaper</link>;
<link linkend="VteReaper">VteReaper</link>*  <link linkend="vte-reaper-get">vte_reaper_get</link>                  (void);
<link linkend="int">int</link>         <link linkend="vte-reaper-add-child">vte_reaper_add_child</link>            (<link linkend="GPid">GPid</link> pid);

</synopsis>
</refsynopsisdiv>

<refsect1 role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----VteReaper
</synopsis>

</refsect1>






<refsect1 role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>

&quot;<link linkend="VteReaper-child-exited">child-exited</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="VteReaper">VteReaper</link> *vtereaper,
                                            <link linkend="gint">gint</link>       arg1,
                                            <link linkend="gint">gint</link>       arg2,
                                            <link linkend="gpointer">gpointer</link>   user_data)      : Run last
</synopsis>
</refsect1>


<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
Because an application may need to be notified when child processes
exit, and because there is only one <link linkend="SIGCHLD:CAPS"><literal>SIGCHLD</literal></link> handler, the <link linkend="VteTerminal"><type>VteTerminal</type></link>
widget relies on a <link linkend="VteReaper"><type>VteReaper</type></link> to watch for <link linkend="SIGCHLD:CAPS"><literal>SIGCHLD</literal></link> notifications and
retrieve the exit status of child processes which have exited.  When
glib provides child_watch functionality, the <link linkend="VteReaper"><type>VteReaper</type></link> merely acts as
a proxy for glib's own functionality.
</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="VteReaper-struct" role="struct"/>VteReaper</title>
<indexterm><primary>VteReaper</primary></indexterm><programlisting>typedef struct _VteReaper VteReaper;</programlisting>
<para>
This should not be accessed directly.
</para></refsect2>
<refsect2>
<title><anchor id="vte-reaper-get" role="function"/>vte_reaper_get ()</title>
<indexterm><primary>vte_reaper_get</primary></indexterm><programlisting><link linkend="VteReaper">VteReaper</link>*  vte_reaper_get                  (void);</programlisting>
<para>
Finds the address of the global <link linkend="VteReaper"><type>VteReaper</type></link> object, creating the object if
necessary.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the global <link linkend="VteReaper"><type>VteReaper</type></link> object, which should not be unreffed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="vte-reaper-add-child" role="function"/>vte_reaper_add_child ()</title>
<indexterm><primary>vte_reaper_add_child</primary></indexterm><programlisting><link linkend="int">int</link>         vte_reaper_add_child            (<link linkend="GPid">GPid</link> pid);</programlisting>
<para>
Ensures that child-exited signals will be emitted when <parameter>pid</parameter> exits.  This is
necessary for correct operation when running with glib versions &gt;= 2.4.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pid</parameter>&nbsp;:</term>
<listitem><simpara> the ID of a child process which will be monitored
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new source ID

Since 0.11.11
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 role="signals">
<title role="signals.title">Signal Details</title>
<refsect2><title><anchor id="VteReaper-child-exited"/>The &quot;child-exited&quot; signal</title>
<indexterm><primary>VteReaper::child-exited</primary></indexterm><programlisting><link linkend="void">void</link>        user_function                  (<link linkend="VteReaper">VteReaper</link> *vtereaper,
                                            <link linkend="gint">gint</link>       arg1,
                                            <link linkend="gint">gint</link>       arg2,
                                            <link linkend="gpointer">gpointer</link>   user_data)      : Run last</programlisting>
<para>
Emitted when the <link linkend="VteReaper"><type>VteReaper</type></link> object detects that a child of the current process has exited.
</para><variablelist role="params">
<varlistentry><term><parameter>vtereaper</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>the process ID of the exited child.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&nbsp;:</term>
<listitem><simpara>the status of the exited child, as returned by <link linkend="waitpid"><function>waitpid()</function></link>.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
