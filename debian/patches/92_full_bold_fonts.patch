Upstream: http://bugzilla.gnome.org/show_bug.cgi?id=54926
Description: Fix bold font handling.

diff -Nur -x '*.orig' -x '*~' vte/src/vte.c vte.new/src/vte.c
--- vte/src/vte.c	2008-05-27 01:27:06.000000000 -0700
+++ vte.new/src/vte.c	2008-07-13 21:57:15.000000000 -0700
@@ -8282,7 +8282,7 @@
 	}
 
 	if (_vte_draw_char(terminal->pvt->draw, &request,
-			   &color, VTE_DRAW_OPAQUE)) {
+			   &color, VTE_DRAW_OPAQUE, FALSE)) {
 		/* We were able to draw with actual fonts. */
 		return TRUE;
 	}
@@ -9026,6 +9026,7 @@
 	gint columns = 0;
 	GdkColor color = {0,};
 	struct vte_palette_entry *fg, *bg, *defbg;
+	gboolean has_bold_font = FALSE;
 
 	g_assert(n > 0);
 	_VTE_DEBUG_IF(VTE_DEBUG_CELLS) {
@@ -9043,6 +9044,10 @@
 	}
 
 	bold = bold && terminal->pvt->allow_bold;
+	if (bold) {
+		has_bold_font = _vte_draw_has_bold_font (terminal->pvt->draw);
+	}
+	
 	fg = &terminal->pvt->palette[fore];
 	bg = &terminal->pvt->palette[back];
 	defbg = &terminal->pvt->palette[VTE_DEF_BG];
@@ -9075,15 +9080,18 @@
 	color.green = fg->green;
 	_vte_draw_text(terminal->pvt->draw,
 			items, n,
-			&color, VTE_DRAW_OPAQUE);
-	if (bold) {
+			&color, VTE_DRAW_OPAQUE,
+			bold ? has_bold_font : FALSE);
+	/* For backends that do not implement correct bolding, perform
+	   double-striking in an attempt to approximate it. */
+	if (bold && !has_bold_font) {
 		/* Take a step to the right. */
 		for (i = 0; i < n; i++) {
 			items[i].x++;
 		}
 		_vte_draw_text(terminal->pvt->draw,
 				items, n,
-				&color, VTE_DRAW_OPAQUE);
+				&color, VTE_DRAW_OPAQUE, FALSE);
 		/* Now take a step back. */
 		for (i = 0; i < n; i++) {
 			items[i].x--;
diff -Nur -x '*.orig' -x '*~' vte/src/vtedraw.c vte.new/src/vtedraw.c
--- vte/src/vtedraw.c	2008-05-23 12:36:03.000000000 -0700
+++ vte.new/src/vtedraw.c	2008-07-13 21:57:27.000000000 -0700
@@ -325,6 +325,14 @@
 }
 
 gboolean
+_vte_draw_has_bold_font (struct _vte_draw *draw)
+{
+	g_return_val_if_fail (draw->impl != NULL, 1);
+	g_return_val_if_fail (draw->impl->has_bold_font != NULL, FALSE);
+	return draw->impl->has_bold_font (draw);
+}
+
+gboolean
 _vte_draw_get_using_fontconfig (struct _vte_draw *draw)
 {
 	g_return_val_if_fail (draw->impl != NULL, TRUE);
@@ -335,7 +343,7 @@
 void
 _vte_draw_text (struct _vte_draw *draw,
 	       struct _vte_draw_text_request *requests, gsize n_requests,
-	       GdkColor *color, guchar alpha)
+	       GdkColor *color, guchar alpha, gboolean bold)
 {
 	g_return_if_fail (draw->started == TRUE);
 	g_return_if_fail (draw->impl != NULL);
@@ -348,31 +356,31 @@
 			g_string_append_unichar (string, requests[n].c);
 		}
 		str = g_string_free (string, FALSE);
-		g_printerr ("draw_text (\"%s\", len=%"G_GSIZE_FORMAT", color=(%d,%d,%d,%d))\n",
+		g_printerr ("draw_text (\"%s\", len=%"G_GSIZE_FORMAT", color=(%d,%d,%d,%d), %s)\n",
 				str, n_requests, color->red, color->green, color->blue,
-				alpha);
+				alpha, bold ? "bold" : "normal");
 		g_free (str);
 	}
-	draw->impl->draw_text (draw, requests, n_requests, color, alpha);
+	draw->impl->draw_text (draw, requests, n_requests, color, alpha, bold);
 }
 
 gboolean
 _vte_draw_char (struct _vte_draw *draw,
 	       struct _vte_draw_text_request *request,
-	       GdkColor *color, guchar alpha)
+	       GdkColor *color, guchar alpha, gboolean bold)
 {
 	g_return_val_if_fail (draw->started == TRUE, FALSE);
 	g_return_val_if_fail (draw->impl != NULL, FALSE);
 	_vte_debug_print (VTE_DEBUG_DRAW,
-			"draw_char ('%c', color=(%d,%d,%d,%d))\n",
+			"draw_char ('%c', color=(%d,%d,%d,%d), %s)\n",
 			request->c,
 			color->red, color->green, color->blue,
-			alpha);
+			alpha, bold ? "bold" : "normal");
 	if (draw->impl->draw_char == NULL) {
-		draw->impl->draw_text (draw, request, 1, color, alpha);
+		draw->impl->draw_text (draw, request, 1, color, alpha, bold);
 		return TRUE;
 	}
-	return draw->impl->draw_char (draw, request, color, alpha);
+	return draw->impl->draw_char (draw, request, color, alpha, bold);
 }
 gboolean
 _vte_draw_has_char (struct _vte_draw *draw, gunichar c)
diff -Nur -x '*.orig' -x '*~' vte/src/vtedraw.h vte.new/src/vtedraw.h
--- vte/src/vtedraw.h	2007-04-04 08:25:24.000000000 -0700
+++ vte.new/src/vtedraw.h	2008-07-13 21:57:15.000000000 -0700
@@ -80,12 +80,13 @@
 	int (*get_text_ascent)(struct _vte_draw *);
 	int (*get_char_width)(struct _vte_draw *, gunichar c, int columns);
 	gboolean (*get_using_fontconfig)(struct _vte_draw *);
+	gboolean (*has_bold_font)(struct _vte_draw *);
 	void (*draw_text)(struct _vte_draw *,
 			  struct _vte_draw_text_request *, gsize,
-			  GdkColor *, guchar);
+			  GdkColor *, guchar, gboolean);
 	gboolean (*draw_char)(struct _vte_draw *,
 			      struct _vte_draw_text_request *,
-			      GdkColor *, guchar);
+			      GdkColor *, guchar, gboolean);
 	gboolean (*has_char)(struct _vte_draw *, gunichar);
 	void (*draw_rectangle)(struct _vte_draw *,
 			       gint, gint, gint, gint,
@@ -147,15 +148,16 @@
 int _vte_draw_get_text_height(struct _vte_draw *draw);
 int _vte_draw_get_text_ascent(struct _vte_draw *draw);
 int _vte_draw_get_char_width(struct _vte_draw *draw, gunichar c, int columns);
+gboolean _vte_draw_has_bold_font(struct _vte_draw *draw);
 gboolean _vte_draw_get_using_fontconfig(struct _vte_draw *draw);
 
 /* Draw text or rectangles. */
 void _vte_draw_text(struct _vte_draw *draw,
 		    struct _vte_draw_text_request *requests, gsize n_requests,
-		    GdkColor *color, guchar alpha);
+		    GdkColor *color, guchar alpha, gboolean bold);
 gboolean _vte_draw_char(struct _vte_draw *draw,
 			struct _vte_draw_text_request *request,
-			GdkColor *color, guchar alpha);
+			GdkColor *color, guchar alpha, gboolean bold);
 gboolean _vte_draw_has_char(struct _vte_draw *draw, gunichar c);
 void _vte_draw_fill_rectangle(struct _vte_draw *draw,
 			      gint x, gint y, gint width, gint height,
diff -Nur -x '*.orig' -x '*~' vte/src/vteft2.c vte.new/src/vteft2.c
--- vte/src/vteft2.c	2007-11-28 05:44:48.000000000 -0800
+++ vte.new/src/vteft2.c	2008-07-13 21:57:15.000000000 -0700
@@ -272,6 +272,12 @@
 }
 
 static gboolean
+_vte_ft2_has_bold_font (struct _vte_draw *draw)
+{
+	return FALSE;
+}
+
+static gboolean
 _vte_ft2_get_using_fontconfig(struct _vte_draw *draw)
 {
 	return TRUE;
@@ -280,7 +286,7 @@
 static void
 _vte_ft2_draw_text(struct _vte_draw *draw,
 		   struct _vte_draw_text_request *requests, gsize n_requests,
-		   GdkColor *color, guchar alpha)
+		   GdkColor *color, guchar alpha, gboolean bold)
 {
 	struct _vte_ft2_data *data;
 	gsize i, j;
@@ -317,7 +323,7 @@
 static gboolean
 _vte_ft2_draw_char(struct _vte_draw *draw,
 		   struct _vte_draw_text_request *request,
-		   GdkColor *color, guchar alpha)
+		   GdkColor *color, guchar alpha, gboolean bold)
 {
 	struct _vte_ft2_data *data;
 
@@ -325,7 +331,7 @@
 
 	if (data->cache != NULL) {
 		if (_vte_glyph_get(data->cache, request->c) != NULL) {
-			_vte_ft2_draw_text(draw, request, 1, color, alpha);
+			_vte_ft2_draw_text(draw, request, 1, color, alpha, bold);
 			return TRUE;
 		}
 	}
@@ -417,6 +423,7 @@
 	_vte_ft2_get_text_ascent,
 	_vte_ft2_get_char_width,
 	_vte_ft2_get_using_fontconfig,
+	_vte_ft2_has_bold_font,
 	_vte_ft2_draw_text,
 	_vte_ft2_draw_char,
 	_vte_ft2_draw_has_char,
diff -Nur -x '*.orig' -x '*~' vte/src/vtegl.c vte.new/src/vtegl.c
--- vte/src/vtegl.c	2007-11-27 01:56:41.000000000 -0800
+++ vte.new/src/vtegl.c	2008-07-13 21:57:15.000000000 -0700
@@ -419,6 +419,12 @@
 }
 
 static gboolean
+_vte_gl_has_bold_font (struct _vte_draw *draw)
+{
+	return FALSE;
+}
+
+static gboolean
 _vte_gl_get_using_fontconfig(struct _vte_draw *draw)
 {
 	return TRUE;
@@ -427,7 +433,7 @@
 static void
 _vte_gl_draw_text(struct _vte_draw *draw,
 		  struct _vte_draw_text_request *requests, gsize n_requests,
-		  GdkColor *color, guchar alpha)
+		  GdkColor *color, guchar alpha, gboolean bold)
 {
 	struct _vte_gl_data *data;
 	const struct _vte_glyph *glyph;
@@ -503,7 +509,7 @@
 static gboolean
 _vte_gl_draw_char(struct _vte_draw *draw,
 		  struct _vte_draw_text_request *request,
-		  GdkColor *color, guchar alpha)
+		  GdkColor *color, guchar alpha, gboolean bold)
 {
 	struct _vte_gl_data *data;
 
@@ -511,7 +517,7 @@
 
 	if (data->cache != NULL) {
 		if (_vte_glyph_get(data->cache, request->c) != NULL) {
-			_vte_gl_draw_text(draw, request, 1, color, alpha);
+			_vte_gl_draw_text(draw, request, 1, color, alpha, bold);
 			return TRUE;
 		}
 	}
@@ -603,6 +609,7 @@
 	_vte_gl_get_text_ascent,
 	_vte_gl_get_char_width,
 	_vte_gl_get_using_fontconfig,
+	_vte_gl_has_bold_font,
 	_vte_gl_draw_text,
 	_vte_gl_draw_char,
 	_vte_gl_draw_has_char,
diff -Nur -x '*.orig' -x '*~' vte/src/vtepango.c vte.new/src/vtepango.c
--- vte/src/vtepango.c	2008-05-27 01:27:06.000000000 -0700
+++ vte.new/src/vtepango.c	2008-07-13 21:57:15.000000000 -0700
@@ -327,6 +327,12 @@
 }
 
 static gboolean
+_vte_pango_has_bold_font (struct _vte_draw *draw)
+{
+	return FALSE;
+}
+
+static gboolean
 _vte_pango_get_using_fontconfig(struct _vte_draw *draw)
 {
 	return TRUE;
@@ -335,7 +341,7 @@
 static void
 _vte_pango_draw_text(struct _vte_draw *draw,
 		     struct _vte_draw_text_request *requests, gsize n_requests,
-		     GdkColor *color, guchar alpha)
+		     GdkColor *color, guchar alpha, gboolean bold)
 {
 	struct _vte_pango_data *data = (struct _vte_pango_data*) draw->impl_data;
 	char buf[VTE_UTF8_BPC];
@@ -361,9 +367,9 @@
 static gboolean
 _vte_pango_draw_char(struct _vte_draw *draw,
 		     struct _vte_draw_text_request *request,
-		     GdkColor *color, guchar alpha)
+		     GdkColor *color, guchar alpha, gboolean bold)
 {
-	_vte_pango_draw_text(draw, request, 1, color, alpha);
+	_vte_pango_draw_text(draw, request, 1, color, alpha, bold);
 	return TRUE;
 }
 
@@ -445,6 +451,7 @@
 	_vte_pango_get_text_ascent,
 	_vte_pango_get_char_width,
 	_vte_pango_get_using_fontconfig,
+	_vte_pango_has_bold_font,
 	_vte_pango_draw_text,
 	_vte_pango_draw_char,
 	_vte_pango_draw_has_char,
diff -Nur -x '*.orig' -x '*~' vte/src/vtepangox.c vte.new/src/vtepangox.c
--- vte/src/vtepangox.c	2007-11-28 05:55:16.000000000 -0800
+++ vte.new/src/vtepangox.c	2008-07-13 21:57:15.000000000 -0700
@@ -374,6 +374,12 @@
 }
 
 static gboolean
+_vte_pango_x_has_bold_font (struct _vte_draw *draw)
+{
+	return FALSE;
+}
+
+static gboolean
 _vte_pango_x_get_using_fontconfig(struct _vte_draw *draw)
 {
 	return FALSE;
@@ -383,7 +389,7 @@
 _vte_pango_x_draw_text(struct _vte_draw *draw,
 		       struct _vte_draw_text_request *requests,
 		       gsize n_requests,
-		       GdkColor *color, guchar alpha)
+		       GdkColor *color, guchar alpha, gboolean bold)
 {
 	Display *display;
 	GC gc;
@@ -416,9 +422,9 @@
 static gboolean
 _vte_pango_x_draw_char(struct _vte_draw *draw,
 		       struct _vte_draw_text_request *request,
-		       GdkColor *color, guchar alpha)
+		       GdkColor *color, guchar alpha, gboolean bold)
 {
-	_vte_pango_x_draw_text(draw, request, 1, color, alpha);
+	_vte_pango_x_draw_text(draw, request, 1, color, alpha, bold);
 	return TRUE;
 }
 
@@ -494,6 +500,7 @@
 	_vte_pango_x_get_text_ascent,
 	_vte_pango_x_get_char_width,
 	_vte_pango_x_get_using_fontconfig,
+	_vte_pango_x_has_bold_font,
 	_vte_pango_x_draw_text,
 	_vte_pango_x_draw_char,
 	_vte_pango_x_draw_has_char,
diff -Nur -x '*.orig' -x '*~' vte/src/vtexft.c vte.new/src/vtexft.c
--- vte/src/vtexft.c	2007-11-27 01:56:53.000000000 -0800
+++ vte.new/src/vtexft.c	2008-07-13 21:57:15.000000000 -0700
@@ -58,10 +58,14 @@
 
 	gint width, height, ascent;
 	gboolean have_metrics;
+
+	GPtrArray *locked_fonts[2];
+	guint cur_locked_fonts;
 };
 
 struct _vte_xft_data {
 	struct _vte_xft_font *font;
+	struct _vte_xft_font *font_bold;
 	Display *display;
 	Drawable drawable;
 	int x_offs, y_offs;
@@ -74,8 +78,6 @@
 	Pixmap xpixmap;
 	gint pixmapw, pixmaph;
 	gint scrollx, scrolly;
-	GPtrArray *locked_fonts[2];
-	guint cur_locked_fonts;
 	gboolean has_clip_mask;
 };
 
@@ -133,6 +135,16 @@
 	return TRUE;
 }
 
+static GPtrArray *
+ptr_array_zeroed_new (guint len)
+{
+	GPtrArray *ptr;
+	ptr = g_ptr_array_sized_new (len);
+	while (len--) {
+		g_ptr_array_add (ptr, NULL);
+	}
+	return ptr;
+}
 static struct _vte_xft_font *
 _vte_xft_font_open (GtkWidget *widget, const PangoFontDescription *fontdesc,
 		   VteTerminalAntiAlias antialias)
@@ -147,7 +159,7 @@
 		return NULL;
 	}
 
-	font = g_slice_new (struct _vte_xft_font);
+	font = g_slice_new0 (struct _vte_xft_font);
 	font->ref = 1;
 	font->display = GDK_DISPLAY_XDISPLAY (gtk_widget_get_display (widget));
 	font->patterns = patterns;
@@ -175,12 +187,39 @@
 		g_ptr_array_add (font->fonts, NULL); /* 1 indexed array */
 		font->fontmap = _vte_tree_new (_vte_xft_direct_compare);
 		font->widths = _vte_tree_new (_vte_xft_direct_compare);
+		font->locked_fonts[0] = ptr_array_zeroed_new (
+						1 + font->patterns->len);
+		font->locked_fonts[1] = ptr_array_zeroed_new (
+						1 + font->patterns->len);
 	}
 
 	return font;
 }
 
 static void
+_vte_xft_unlock_font (struct _vte_xft_font *font, guint element, gboolean free_array)
+{
+	guint j, i;
+	i = element & 1;
+
+	if (font->locked_fonts[i] != NULL) {
+		for (j = 1; j < font->locked_fonts[i]->len; j++) {
+			XftFont *ftfont = g_ptr_array_index (
+					font->locked_fonts[i], j);
+			if (ftfont != NULL) {
+				XftUnlockFace (ftfont);
+				g_ptr_array_index (
+					font->locked_fonts[i], j) = NULL;
+			}
+		}
+		if (free_array) {
+			g_ptr_array_free (font->locked_fonts[i], TRUE);
+			font->locked_fonts[i] = NULL;
+		}
+	}
+}
+
+static void
 _vte_xft_font_close (struct _vte_xft_font *font)
 {
 	XftFont *ftfont;
@@ -189,6 +228,11 @@
 	if (--font->ref) {
 		return;
 	}
+
+	for (i = 0; i < G_N_ELEMENTS (font->locked_fonts); i++) {
+		_vte_xft_unlock_font (font, i, TRUE);
+	}
+
 	g_hash_table_remove (font_cache, font);
 
 	for (i = 0; i < font->patterns->len; i++) {
@@ -216,11 +260,12 @@
 }
 
 static XftFont *
-_vte_xft_open_font_for_char (struct _vte_xft_font *font, gunichar c, GPtrArray *locked_fonts)
+_vte_xft_open_font_for_char (struct _vte_xft_font *font, gunichar c)
 {
 	gpointer p = GINT_TO_POINTER (c);
 	guint i, j;
 	XftFont *ftfont;
+	GPtrArray *locked_fonts = font->locked_fonts[font->cur_locked_fonts&1];
 
 	/* Look the character up in the fonts we have. */
 	for (i = 1; i < font->fonts->len; i++) {
@@ -268,10 +313,11 @@
 	return NULL;
 }
 static inline XftFont *
-_vte_xft_font_for_char (struct _vte_xft_font *font, gunichar c, GPtrArray *locked_fonts)
+_vte_xft_font_for_char (struct _vte_xft_font *font, gunichar c)
 {
 	guint i;
 	XftFont *ftfont;
+	GPtrArray *locked_fonts = font->locked_fonts[font->cur_locked_fonts&1];
 
 	/* Check if we have a char-to-font entry for it. */
 	i = GPOINTER_TO_INT (_vte_tree_lookup (
@@ -291,7 +337,7 @@
 			return ftfont;
 		}
 	} else
-		return _vte_xft_open_font_for_char (font, c, locked_fonts);
+		return _vte_xft_open_font_for_char (font, c);
 }
 
 static gint _vte_xft_compute_char_width (struct _vte_xft_font *font, XftFont *ftfont, gunichar c, int columns)
@@ -357,30 +403,16 @@
 }
 
 static void
-_vte_xft_unlock_fonts (struct _vte_xft_data *data)
-{
-	guint i, j;
-	for (i = 0; i < G_N_ELEMENTS (data->locked_fonts); i++) {
-		for (j = 1; j < data->locked_fonts[i]->len; j++) {
-			XftFont *ftfont = g_ptr_array_index (
-					data->locked_fonts[i], j);
-			if (ftfont != NULL) {
-				XftUnlockFace (ftfont);
-			}
-		}
-		g_ptr_array_free (data->locked_fonts[i], TRUE);
-		data->locked_fonts[i] = NULL;
-	}
-}
-static void
 _vte_xft_destroy (struct _vte_draw *draw)
 {
 	struct _vte_xft_data *data;
 	data = (struct _vte_xft_data*) draw->impl_data;
 	if (data->font != NULL) {
-		_vte_xft_unlock_fonts (data);
 		_vte_xft_font_close (data->font);
 	}
+	if (data->font_bold != NULL) {
+		_vte_xft_font_close (data->font_bold);
+	}
 	if (data->pixmap != NULL) {
 		g_object_unref (data->pixmap);
 	}
@@ -406,8 +438,6 @@
 _vte_xft_start (struct _vte_draw *draw)
 {
 	GdkDrawable *drawable;
-	GPtrArray *locked_fonts;
-	guint i;
 
 	struct _vte_xft_data *data;
 	data = (struct _vte_xft_data*) draw->impl_data;
@@ -437,17 +467,16 @@
 	}
 	g_assert (data->display == data->font->display);
 
-	locked_fonts = data->locked_fonts [++data->cur_locked_fonts&1];
-	if (locked_fonts != NULL) {
-		guint cnt=0;
-		for (i = 1; i < locked_fonts->len; i++) {
-			XftFont *ftfont = g_ptr_array_index (locked_fonts, i);
-			if (ftfont != NULL) {
-				XftUnlockFace (ftfont);
-				g_ptr_array_index (locked_fonts, i) = NULL;
-				cnt++;
-			}
-		}
+	_vte_xft_unlock_font (data->font,
+			      ++data->font->cur_locked_fonts&1,
+			      FALSE);
+
+	if (data->font_bold) {
+		g_assert (data->display == data->font_bold->display);
+
+		_vte_xft_unlock_font (data->font_bold,
+				      ++data->font_bold->cur_locked_fonts&1,
+				      FALSE);
 	}
 }
 
@@ -614,18 +643,9 @@
 	XFreeGC (data->display, gc);
 }
 
-static GPtrArray *
-ptr_array_zeroed_new (guint len)
-{
-	GPtrArray *ptr;
-	ptr = g_ptr_array_sized_new (len);
-	while (len--) {
-		g_ptr_array_add (ptr, NULL);
-	}
-	return ptr;
-}
-static void
-_vte_xft_set_text_font (struct _vte_draw *draw,
+static gboolean
+_vte_xft_set_text_font_prepare (struct _vte_draw *draw,
+		       struct _vte_xft_font **fontptr,
 		       const PangoFontDescription *fontdesc,
 		       VteTerminalAntiAlias antialias)
 {
@@ -636,37 +656,26 @@
 
 	ft = _vte_xft_font_open (draw->widget, fontdesc, antialias);
 	if (ft != NULL) {
-		if (data->font != NULL) {
-			_vte_xft_unlock_fonts (data);
-			_vte_xft_font_close (data->font);
+		if (*fontptr != NULL) {
+			_vte_xft_font_close (*fontptr);
 		}
-		data->font = ft;
+		*fontptr = ft;
 	}
-	if (data->font == NULL) {
-		return;
+	if (*fontptr == NULL) {
+		return FALSE;
 	}
 
-	data->locked_fonts[0] = ptr_array_zeroed_new (1 + data->font->patterns->len);
-	data->locked_fonts[1] = ptr_array_zeroed_new (1 + data->font->patterns->len);
-
-	if (data->font->have_metrics) {
-		draw->width = data->font->width;
-		draw->height = data->font->height;
-		draw->ascent = data->font->ascent;
-	} else {
+	if (!(*fontptr)->have_metrics) {
 		XftFont *font, *prev_font;
 		XGlyphInfo extents;
 		gunichar wide_chars[] = {VTE_DRAW_DOUBLE_WIDE_CHARACTERS};
 		guint i;
 		gint n, width, height, min = G_MAXINT, max = G_MININT;
 		FcChar32 c;
-		GPtrArray *locked_fonts;
-
-		draw->width = 1;
-		draw->height = 1;
-		draw->ascent = 1;
 
-		locked_fonts = data->locked_fonts [data->cur_locked_fonts&1];
+		gint font_width = 1;
+		gint font_height = 1;
+		gint font_ascent = 1;
 
 		gdk_error_trap_push ();
 		n = width = height = 0;
@@ -674,10 +683,10 @@
 		 * characters. */
 		for (i = 0; i < sizeof (VTE_DRAW_SINGLE_WIDE_CHARACTERS) - 1; i++) {
 			c = VTE_DRAW_SINGLE_WIDE_CHARACTERS[i];
-			font = _vte_xft_font_for_char (data->font, c, locked_fonts);
+			font = _vte_xft_font_for_char (*fontptr, c);
 			if (font != NULL) {
 				memset (&extents, 0, sizeof (extents));
-				_vte_xft_text_extents (data->font, font, c, &extents);
+				_vte_xft_text_extents (*fontptr, font, c, &extents);
 				n++;
 				width += extents.xOff;
 				if (extents.xOff < min) {
@@ -692,10 +701,10 @@
 			}
 		}
 		if (n > 0) {
-			draw->width = howmany (width, n);
-			draw->height = (font != NULL) ?
+			font_width = howmany (width, n);
+			font_height = (font != NULL) ?
 				font->ascent + font->descent : height;
-			draw->ascent = (font != NULL) ?
+			font_ascent = (font != NULL) ?
 				font->ascent : height;
 		}
 		/* Estimate a typical cell width by looking at double-width
@@ -705,20 +714,20 @@
 		prev_font = NULL;
 		for (i = 0; i < G_N_ELEMENTS (wide_chars); i++) {
 			c = wide_chars[i];
-			font = _vte_xft_font_for_char (data->font, c, locked_fonts);
+			font = _vte_xft_font_for_char (*fontptr, c);
 			if (font != NULL) {
 				if (n && prev_font != font) {/* font change */
 					width = howmany (width, n);
-					if (width >= draw->width -1 &&
-							width <= draw->width + 1){
+					if (width >= font_width -1 &&
+							width <= font_width + 1){
 						/* add 1 to round up when dividing by 2 */
-						draw->width = (draw->width + 1) / 2;
+						font_width = (font_width + 1) / 2;
 						break;
 					}
 					n = width = 0;
 				}
 				memset (&extents, 0, sizeof (extents));
-				_vte_xft_text_extents (data->font, font, c, &extents);
+				_vte_xft_text_extents (*fontptr, font, c, &extents);
 				n++;
 				width += extents.xOff;
 				prev_font = font;
@@ -726,26 +735,69 @@
 		}
 		if (n > 0) {
 			width = howmany (width, n);
-			if (width >= draw->width -1 &&
-					width <= draw->width + 1){
+			if (width >= font_width -1 &&
+					width <= font_width + 1){
 				/* add 1 to round up when dividing by 2 */
-				draw->width = (draw->width + 1) / 2;
+				font_width = (font_width + 1) / 2;
 			}
 		}
 
 		gdk_error_trap_pop ();
 
-		data->font->width = draw->width;
-		data->font->height = draw->height;
-		data->font->ascent = draw->ascent;
-		data->font->have_metrics = TRUE;
+		(*fontptr)->width = font_width;
+		(*fontptr)->height = font_height;
+		(*fontptr)->ascent = font_ascent;
+		(*fontptr)->have_metrics = TRUE;
 
 		_vte_debug_print (VTE_DEBUG_MISC,
 				"VteXft font metrics = %dx%d (%d),"
 				" width range [%d, %d].\n",
-				draw->width, draw->height, draw->ascent,
+				font_width, font_height, font_ascent,
 				min, max);
 	}
+	return TRUE;
+}
+
+static void
+_vte_xft_set_text_font (struct _vte_draw *draw,
+		       const PangoFontDescription *fontdesc,
+		       VteTerminalAntiAlias antialias)
+{
+	PangoFontDescription *bolddesc;
+	struct _vte_xft_data *data;
+
+	data = (struct _vte_xft_data*) draw->impl_data;
+
+	/* prepare regular font */
+	if (!_vte_xft_set_text_font_prepare(draw, &data->font, fontdesc, antialias) ||
+            !data->font) {
+		return;
+	}
+
+	/* calculate bold font desc */
+	if ( !(bolddesc = pango_font_description_copy (fontdesc)) ) {
+		goto boldless;
+	}
+	pango_font_description_set_weight (bolddesc, PANGO_WEIGHT_BOLD);
+	
+	/* prepare bold font */
+	if (!_vte_xft_set_text_font_prepare(draw, &data->font_bold, bolddesc, antialias) ||
+            !data->font_bold) {
+		goto boldless;
+	}
+	pango_font_description_free (bolddesc);
+
+	draw->width = MAX(data->font->width, data->font_bold->width);
+	draw->height = MAX(data->font->height, data->font_bold->height);
+	draw->ascent = MAX(data->font->ascent, data->font_bold->ascent);
+
+	return;
+
+boldless:
+	if (bolddesc) pango_font_description_free(bolddesc);
+	draw->width = data->font->width;
+	draw->height = data->font->height;
+	draw->ascent = data->font->ascent;
 }
 
 static inline int
@@ -775,8 +827,7 @@
 
 	data = (struct _vte_xft_data*) draw->impl_data;
 	if (data->font != NULL) {
-		ftfont = _vte_xft_font_for_char (data->font, c,
-				data->locked_fonts[data->cur_locked_fonts&1]);
+		ftfont = _vte_xft_font_for_char (data->font, c);
 		if (ftfont != NULL) {
 			width = _vte_xft_char_width (data->font, ftfont, c, columns);
 			if (width != 0) {
@@ -788,6 +839,15 @@
 }
 
 static gboolean
+_vte_xft_has_bold_font (struct _vte_draw *draw)
+{
+	struct _vte_xft_data *data;
+	data = (struct _vte_xft_data*) draw->impl_data;
+
+	return (data->font_bold != NULL);
+}
+
+static gboolean
 _vte_xft_get_using_fontconfig (struct _vte_draw *draw)
 {
 	return TRUE;
@@ -796,7 +856,7 @@
 static void
 _vte_xft_draw_text (struct _vte_draw *draw,
 		   struct _vte_draw_text_request *requests, gsize n_requests,
-		   GdkColor *color, guchar alpha)
+		   GdkColor *color, guchar alpha, gboolean bold)
 {
 	XftGlyphSpec glyphs[MAX_RUN_LENGTH];
 	XRenderColor rcolor;
@@ -805,19 +865,23 @@
 	gsize i, j;
 	gint width, y_off, x_off, char_width;
 	XftFont *font, *ft;
-	GPtrArray *locked_fonts;
+	struct _vte_xft_font * xft_font;
 
 	data = (struct _vte_xft_data*) draw->impl_data;
-	if (G_UNLIKELY (data->font == NULL)){
+	if (G_UNLIKELY (bold)) {
+		xft_font = data->font_bold ? data->font_bold : data->font;
+	}
+	else {
+		xft_font = data->font;
+	}
+	if (G_UNLIKELY (xft_font == NULL)){
 		return; /* cannot draw anything */
 	}
-	locked_fonts = data->locked_fonts[data->cur_locked_fonts&1];
 
 	/* find the first displayable character ... */
 	font = NULL;
 	for (i = 0; i < n_requests; i++) {
-		font = _vte_xft_font_for_char (data->font,
-				requests[i].c, locked_fonts);
+		font = _vte_xft_font_for_char (xft_font, requests[i].c);
 		if (G_UNLIKELY (font == NULL)) {
 			continue;
 		}
@@ -853,7 +917,7 @@
 					font, requests[i].c);
 			glyphs[j].x = requests[i].x + x_off;
 			next_x = requests[i].x + requests[i].columns*char_width;
-			width = _vte_xft_char_width (data->font,
+			width = _vte_xft_char_width (xft_font,
 					font, requests[i].c, requests[i].columns);
 			if (G_UNLIKELY (width != 0)) {
 				width = requests[i].columns*char_width - width;
@@ -866,8 +930,8 @@
 			/* find the next displayable character ... */
 			ft = NULL;
 			while (++i < n_requests) {
-				ft = _vte_xft_font_for_char (data->font,
-						requests[i].c, locked_fonts);
+				ft = _vte_xft_font_for_char (xft_font,
+						requests[i].c);
 				if (G_UNLIKELY (ft == NULL)) {
 					continue;
 				}
@@ -908,15 +972,15 @@
 static gboolean
 _vte_xft_draw_char (struct _vte_draw *draw,
 		   struct _vte_draw_text_request *request,
-		   GdkColor *color, guchar alpha)
+		   GdkColor *color, guchar alpha, gboolean bold)
 {
 	struct _vte_xft_data *data;
 
 	data = (struct _vte_xft_data*) draw->impl_data;
 	if (data->font != NULL &&
-			_vte_xft_font_for_char (data->font, request->c,
-				data->locked_fonts[data->cur_locked_fonts&1]) != NULL) {
-		_vte_xft_draw_text (draw, request, 1, color, alpha);
+			_vte_xft_font_for_char (data->font, request->c)
+				!= NULL) {
+		_vte_xft_draw_text (draw, request, 1, color, alpha, bold);
 		return TRUE;
 	}
 	return FALSE;
@@ -929,8 +993,7 @@
 
 	data = (struct _vte_xft_data*) draw->impl_data;
 	if (data->font != NULL &&
-			_vte_xft_font_for_char (data->font, c,
-				data->locked_fonts[data->cur_locked_fonts&1]) != NULL) {
+			_vte_xft_font_for_char (data->font, c) != NULL) {
 
 		return TRUE;
 	}
@@ -1024,6 +1087,7 @@
 	_vte_xft_get_text_ascent,
 	_vte_xft_get_char_width,
 	_vte_xft_get_using_fontconfig,
+	_vte_xft_has_bold_font,
 	_vte_xft_draw_text,
 	_vte_xft_draw_char,
 	_vte_xft_draw_has_char,
